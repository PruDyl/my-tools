# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
#Function 
snippet clos
	(function() {
		'use strict';
		$1
	})();
snippet jquery
	(function($) {
	})(jQuery);
snippet cl
	console.log(${1:});
snippet ct
	console.log(${1:});
snippet cg
	console.groupCollapsed('{$1:name}');
	for (var i = 0; i < ${2:items}; i++) {
		console.log($2[i]);
	}
	console.groupEnd();
snippet icl
	if (${1:$rootScope.environement !== 'master'}) console.log('${2:things}', ${3:data})
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3}
	}
#Doc
snippet dfun
	/**
	 * @function ${1:func}${6}
	 * @returns ${3:null}
	*/
	function $1 (${2:argument}) {
		${5}
		return $3;
	}

#Documentation
snippet doc
	/**
	 * ${1}
	*/
snippet @des
	@description ${1}
snippet @cst
	@constant {${1:Type}}
snippet @mod
	@module ${1:lib/module}
snippet @met
	@method ${1:method}
snippet @req
	@requires ${1:dep}
snippet @fir
	@fires ${1:class}${2:event}
snippet @eve
	@event ${1:class}${2:event}
snippet @prop
	@property {${1:Type}} ${2:name} - ${3:desc}
snippet @see
	@see ${1:ref}
snippet @glo
	@global
snippet @aut
	@author ${1:Ludovic Pelle} <${2:ludovic.pelle@iprotego.com}>
snippet @ret
	@returns {${1:Type}} - ${2:desc}
snippet @par
	@param {${1:Type}} ${2:param} - ${3:desc}
snippet @exa
	@example ${1:example}
snippet @tod
	@todo ${1:improve}
snippet @ver
	@version ${1:1.0}
snippet @thi
	@this Refer to ${1:that}
snippet @thr
	@throws ${1:Error}
snippet @nsp
	@namespace ${1:namespc}
# Anonymous Function
snippet f
	function(${1}) { ${2} };
#try
snippet try
	try {
		${1}
	} ${2}
snippet cat
	catch(${2:e} ${3:if e instanceof} ${4:TypeError}) {
		${5}
	} ${6}
snippet fin
	finally {
		${1}
	}
snippet tcf
	try {
		${1}
	} catch(${2:e} ${3:if e instanceof} ${4:TypeError}) {
		${5}
	} finally {
		${6}
	}
snippet tc
	try {
		${1}
	} catch(${2:e} ${3:if e instanceof} ${4:TypeError}) {
		${5}
	}
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	}
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	}
snippet fori
	for (var ${1:key} in ${2:Things}) {
		$2[$1]${3}
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	/** 
	 * @method ${1:method}${}
	*/
	$1: function(${2}) {
		${4}
	}${3:,}
snippet :p
	/** 
	 * @property {${1:Type}} ${2:prop}${3}
	*/
	$1: ${3}${2:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}

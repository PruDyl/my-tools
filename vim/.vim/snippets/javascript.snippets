snippet fo
	for (var ${1:$item} of ${2:$list}) {
		${3}
	}
snippet fi
	for (var ${1:i} in ${2:list}) {
		var item = $2[$1];
		${3}
	}
snippet .$e
	.each(function(i, el) {
		${1}
	});
snippet .join
	.join('${1:,}')
snippet .contain
	.contain(${1:'true'})
snippet .map
	.map(function(i, el) {
		${1}
		return ${2:el};
	});
snippet .fe
	.forEach(function(el, i, self) {
		${1}
	});
snippet tc
	try {
		${1}
	} catch (e) {
		${2:console.error(e);}
	}
snippet .filter
	.filter(function(i,el) {
		${1}
	});
snippet dir
	.directive('${1:dir}', $1Dir)
	.controller('$1Ctrl', $1Ctrl);

	$1Ctrl.$inject = [${2}];

	function $1Dir() {
		var linkFn = function(scope, element, attrs) {
			console.log('link', element);
		};
		return {
			templateUrl: '$3',
			controller: '$1Ctrl',
			controllerAs:'vm',
			link: linkFn
		};
	}

	function $1Ctrl($2) {
		var vm =this;
	}
snippet watch
	${1:vm}.$watch(${2:'myVar'}, function(n, o) {
		if (n === o || o === null) {
			return;
		}
		${3:console.log('watch ' + ${myVar},n,o);}
	});
snippet ctrl
	.controller('${1:}Ctrl', $1Ctrl);

	$1Ctrl.$inject = [${2}];

	function $1Ctrl($2) {
		var vm =this;
	}

snippet fac
	.factory('${1:Service}', $1);

	$1.$inject = [${2}];

	function $1 () {
		var service = {
			${3}
		};
		return service;
	}
snippet filter
	.filter('${1:myService}', function($scope${3}) {
		return function(input, param) {
			${4}
			return input;
		};
	})
snippet nmod
	angular.module('${1:mod}', [
		${2}
	])
snippet mod
	angular.module('${1:mod}')
snippet clos
	(function() {
	 'use strict';
	 ${1}
	 })();
snippet cfg
	.config(${1:cfg})
	$1.$inject = [${2}]
	function($2) {
		${3}
	})
snippet route
	.config(${1:config});

	/* @ngInject */
	$1.$inject = ['routerHelperProvider'];

	function config(routerHelperProvider) {
		routerHelperProvider.configureStates([
			{
	            state: '${2}',
	            config: {
	                url: '/$2',
	                templateUrl: '${3}',
	                controller: '${4}Ctrl',
	                controllerAs: 'vm',
	                title: '$2',
	                rules: [${5}],
	                classes:'#$2',
					resolve: {
					}
	            }
	        }
	    ]);
	}
snippet run
	.run(${1:run})

	$1.$inject = [${2}];

	function $1($2) {
		${3}
	}
snippet Api
	return Api.send({
		endpoint: CFG.ENDPOINTS.${1:ROOT},
		registered: ${2:false}${3}
	}, function(response) {
		${4}
	});
snippet des
	//
	describe('${1:1}', function() {
		${2}
	});
	/**/
snippet .then
	.then(function(${1}){
		${2}
	}${3})
snippet it
	//
	it('${1:1}', function() {
		${2}
	});
	/**/
snippet page
	'use_strict';
	var ${1:Page} = {
		${2}
	};
	module.exports = $1;
snippet elcss
	this.${1:element} = function() {return element(by.css(${2:selector}));}
snippet _elcss
	${1:elem}: function() {
		return element(by.css('${2:class}'));
	}
snippet elmod
	this.${1:elem} = function() {return element(by.model('${2:model}'));}
snippet :elmod
	${1:elem}: function() {
		return element(by.model('${2:model}'));
	}
snippet elrep
	this.${1:elem} = function() {return element(by.repeater('${2:rep}'));}
snippet :elrep
	${1:elem}: function() {
		return element(by.repeater('${2:rep}'));
	}
snippet cl
	console.log(${1});
snippet ct
	console.trace();

snippet f)
	function(${1}) {
		${2}
	})
snippet f:
	${1:fx}: function(${2}) {
		${3}
	},
snippet f(
	function(${1}) {
		${2}
	}
snippet doc
	/**
	* ${1:Description}
	*/
snippet @au "@author email (First Last)"
	@author ${1:`!v g:snips_author`} [${2:`!v g:snips_author_email`}]
snippet @li "@license Description"
	@license ${1:MIT}$0
snippet @ver "@version Semantic version"
	@version ${1:0.1.0}$0
snippet @fileo "@fileoverview Description" b
	/**
	* @fileoverview ${1:${VISUAL:A description of the file}}$0
	*/
snippet @constr "@constructor"
	@constructor
snippet @p "@param {Type} varname Description"
	@param {${1:Type}} ${2:varname} ${3:Description}
snippet @ret "@return {Type} Description"
	@return {${1:Type}} ${2:Description}
snippet @pri "@private"
	@private
snippet @over "@override"
	@override
snippet @pro "@protected"
	@protected

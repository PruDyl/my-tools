<?php
/**
 * This file declare the AdminContractorEntityTools class.
 *
 * @package chCmsAdminContractorPlugin
 * @subpackage lib
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-01-05
 */

/**
 * the class used to manipulate company entities and check security
 */
class AdminContractorEntityTools 
{
  /**
   * update the route object to filter by company
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected static function updateRouteForCompany($route, $sf_user)
  {
    $route->getQuery()->filterByCompanyId($sf_user->getSelectedCompany()->getId());
  }

  /**
   * checks the given company entity belongs to selected company
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   * @throws sfError404Exception
   **/
  protected static function checkEntityCompany($route, $sf_user)
  {
    self::updateRouteForCompany($route, $sf_user);
    if (!$route->getObject())
    {
      throw new sfError404Exception('You cannot access this entity');
    }
  }

  /**
   * the preexecute for credentials related actions
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public static function preExecuteCredentials($route, $sf_user)
  {
    AdminContractorEntityTools::updateRouteForCompany($route, $sf_user);
    $route->getQuery()->leftJoinWithCredentialObject();
  }

  /**
   * undocumented function
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public static function getCredentialListHeader($contractors)
  {
    $contractorNames = array('default' => 'Droits par défaut');
    foreach ($contractors as $contractor) 
    {
      $contractorNames[$contractor->getId()] = $contractor->getCompanyName();
    }

    return $contractorNames;
  }

  /**
   * undocumented function
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public static function preExecuteCustomProfile($route, $sf_user)
  {
    AdminContractorEntityTools::updateRouteForCompany($route, $sf_user);
  }

  /**
   * protect entity edition
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   * @throws sfError404Exception
   *
   * @see AdminContractorEntityTools::checkEntityCompany
   **/
  public static function protectBind($route, $sf_user)
  {
    self::checkEntityCompany($route, $sf_user);
  }

  /**
   * protect entity edition
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   * @throws sfError404Exception
   *
   * @see AdminContractorEntityTools::checkEntityCompany
   **/
  public static function protectShow($route, $sf_user)
  {
    self::checkEntityCompany($route, $sf_user);
  }

  /**
   * protect entity edition
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   * @throws sfError404Exception
   *
   * @see AdminContractorEntityTools::checkEntityCompany
   **/
  public static function protectEdit($route, $sf_user)
  {
    self::checkEntityCompany($route, $sf_user);
  }

  public static function protectCreate($route, $sf_user)
  {
    $company = $sf_user->getSelectedCompany();

    // check company still have available slots
    if (! $company->canAddContractor())
    {
      $sf_user->addError(strtr(
          'Vous avez atteint le nombre maximal de %contractor%', array(
            '%contractor%' => $company->getVocabulary('contractor', 2))));
      throw new sfError404Exception('You cannot add any more contractor');
    }
  }

  /**
   * protect the deletion
   *
   * @param chCmsAdminMenuActionPropelRoute $route the object route to protect
   * @param myUser                          $sf_user  the current authenticated user
   *
   * @return CompanyEntity|Boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public static function protectDelete($route, $sf_user)
  {
    self::checkEntityCompany($route, $sf_user);
    
    $contractor = $route->getObject();

    // now we know this is an entity from this company
    // check this is not current user
    if ($sf_user->getGuardUser()->getId() === $contractor->getId())
    {
      $sf_user->addError('Vous ne pouvez pas vous supprimer vous même');
      return false;
    }

    if ($contractor->getCompanyRights()->getIsAdmin())
    {
      $sf_user->addError(
          'Vous ne pouvez pas supprimer un administrateur. Veuillez d\'abord retirer les droits administrateur de %contractor%', 
          array('%contractor%' => $contractor->getCompanyName()));
      return false;
    }

    return $contractor;
  }
} // END OF AdminContractorEntityTools

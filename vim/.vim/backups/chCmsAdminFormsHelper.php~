<?php

/*------------------------ ADMIN FORMS -------------------------*/

global $chCms_is_admin_form_open;
$chCms_is_admin_form_open = false;

/**
 * open the form fields container
 * also set the $chCms_is_admin_form_open flag
 *
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_fields_container_open_tag($html_options = array())
{
  global $chCms_is_admin_form_open;
  $chCms_is_admin_form_open = true;

  return tag('table', $html_options, true) ;
}

/**
 * close the form fields list container
 * also set the $chCms_is_admin_form_open flag
 *
 * @return string
 *
 * @see open_backend_form_fields_container
 */
function get_admin_form_fields_container_close_tag()
{
  global $chCms_is_admin_form_open;
  if ($chCms_is_admin_form_open)
  {
    $chCms_is_admin_form_open = false;
    return '</table>';
  }

  return '';
}

/**
 * open the form fields list container
 *
 * @param array|string          $html_options the html tag options
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function open_admin_form_fields_container($html_options = array())
{
  echo get_admin_form_fields_container_open_tag($html_options);
}

/**
 * close the form fields list container
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function close_admin_form_fields_container()
{
  echo get_admin_form_fields_container_close_tag();
}

/**
 * wraps the given content 
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function admin_wrap_for_form($text, $keep_open = false)
{
  global $chCms_is_admin_form_open;
  if ($chCms_is_admin_form_open)
  {
    if ($keep_open)
    {
      return tag('tr', array(), $keep_open) . tag('th', 'colspan=2', $keep_open) . $text;
    }
    else
    {
      return content_tag('tr', content_tag('th', $text, 'colspan=2', $keep_open), $keep_open);
    }
  }
  return $text;
}

/**
 * close the form wrapper 
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function admin_close_form_wrapper()
{
  global $chCms_is_admin_form_open;
  if ($chCms_is_admin_form_open)
  {
    return '</th></tr>';
  }
  return '';
}

/**
 * generates the html for the admin form openning tag.
 * javascripts and stylesheets are auto included either.
 *
 * @param sfForm                $form the form to render form tag for
 * @param AdminGroupMenu|string $group    the group to render link to
 * @param string                $route_prefix the route prefix to use. will be completed with _create or _update suffix
 * @param array|string          $html_options the html tag options
 * @return string
 *
 * @see form_tag_for
 * @see use_stylesheets_for_form
 * @see use_javascripts_for_form
 *
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_simple_open_tag_for (sfForm $form, $group, $route_prefix, $html_options = array())
{
  use_stylesheets_for_form($form);
  use_javascripts_for_form($form);

  $html = admin_form_tag_for ($form, $group, $route_prefix, $html_options) . "\n";

  if ($form instanceof sfObjectForm && !$form->getObject()->isNew())
  {
    $html.= '<input type="hidden" name="sf_method" value="PUT" />'."\n";
  }

  $html.= $form->renderHiddenFields();

  $html.= $form->renderGlobalErrors();

  return $html;
}

/**
 * generates the html for the admin form openning tag.
 * javascripts and stylesheets are auto included either.
 *
 * @param sfForm                $form the form to render form tag for
 * @param AdminGroupMenu|string $group    the group to render link to
 * @param string                $route_prefix the route prefix to use. will be completed with _create or _update suffix
 * @param array|string          $html_options the html tag options
 * @return string
 *
 * @see form_tag_for
 * @see use_stylesheets_for_form
 * @see use_javascripts_for_form
 *
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_open_tag_for (sfForm $form, $group, $route_prefix, $html_options = array())
{
  $html = get_admin_form_simple_open_tag_for ($form, $group, $route_prefix, $html_options);

  $html.= get_admin_form_fields_container_open_tag();

  return $html;
}

/**
 * writes a form open tag and does not open the field containers
 *
 * @param sfForm                $form the form to render form tag for
 * @param AdminGroupMenu|string $group    the group to render link to
 * @param string                $route_prefix the route prefix to use. will be completed with _create or _update suffix
 * @param array|string          $html_options the html tag options
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function open_admin_simple_form(sfForm $form, $groupMenu, $route_prefix, $html_options = array())
{
  echo get_admin_form_simple_open_tag_for ($form, $groupMenu, $route_prefix, $html_options);
}

/**
 * writes a form open tag and open the field containers
 *
 * @param sfForm                $form the form to render form tag for
 * @param AdminGroupMenu|string $group    the group to render link to
 * @param string                $route_prefix the route prefix to use. will be completed with _create or _update suffix
 * @param array|string          $html_options the html tag options
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function open_admin_form(sfForm $form, $groupMenu, $route_prefix, $html_options = array())
{
  echo get_admin_form_open_tag_for ($form, $groupMenu, $route_prefix, $html_options);
}


/**
 * computes html to close an admin form opened with open_admin_form
 *
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_close_tag()
{
  return get_admin_form_fields_container_close_tag().'</form>';
}

/**
 * close admin form
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @see get_admin_form_close_tag
 **/
function close_admin_form()
{
  echo get_admin_form_close_tag();
}

/**
 * open a fieldset for an admin form
 *
 * @param string        $title          the fieldset title
 * @param array|string  $html_options   the fieldse attributes
 *
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_fieldset_open_tag($title, $html_options = array())
{
  return admin_wrap_for_form(content_tag('h2', __($title), $html_options));
}

/**
 * open a fieldset for an admin form
 *
 * @param string        $title          the fieldset title
 * @param array|string  $html_options   the fieldse attributes
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function open_admin_form_fieldset($title, $html_options = array())
{
  echo get_admin_form_fieldset_open_tag($title, $html_options);
}

/**
 * close a fieldset for an admin form
 *
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_fieldset_close_tag()
{
  return '';
}

/**
 * close a fieldset for an admin form
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function close_admin_form_fieldset()
{
  echo get_admin_form_fieldset_close_tag();
}

/**
 * compute html to open the form field wrapper
 *
 * @param array|string  $html_options   the attributes
 *
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_field_wrapper_open_tag($html_options = array())
{
  return tag('tr', $html_options, true);
}

/**
 * compute html to close the form field wrapper
 *
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_field_wrapper_close_tag()
{
  return '</tr>';
}

/**
 *  compute html to display label
 *
 * @param string        $labelTag       the label tag (include <label>)
 * @param array|string  $html_options   the attributes
 *
 * @return void
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function wrap_admin_form_field_label($labelTag, $html_options = array())
{
  return content_tag('th', $labelTag, $html_options);
}

/**
 * wraps field(s) input(s) into a suitable container for admin forms
 *
 * @param array<sfWidget>|sfWidget  $fields         the field(s) to display
 * @param array|string              $html_options   the attributes
 * 
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 **/
function get_admin_form_field_input($fields, $html_options = array())
{
  if (!is_array($fields))
  {
    $fields = array($fields);
  }
  
  $errors = array();
  $inputs = array();
  $helps  = array();

  foreach ($fields as $field) 
  {
    $errors[] = $field->renderError();
    $inputs[] = $field->render();
    $helps[]  = $field->renderHelp();
  }

  return content_tag(
          'td', 
          sprintf('%s%s<br />%s', join(' ', $errors), join(' ', $inputs), join(' ', $helps)), 
          $html_options);
}

/**
 * render a form field in the unified chCms way
 *
 * @param sfWidgetForm $field the field to rende
 * @param array|string $html_options the field container options
 * @return string
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 */
function get_admin_form_field($field, $html_options)
{
  return    get_admin_form_field_wrapper_open_tag()
              .  wrap_admin_form_field_label($field->renderLabel())
              .  get_admin_form_field_input($field)
          . get_admin_form_field_wrapper_close_tag();
}

/**
 * render a form field inundocumented function the unified chCms way
 *
 * @param sfWidgetForm $field the field to rende
 * @param array|string $html_options the field container options
 * @return void
 *
 * @see get_admin_form_field
 * @see open_admin_form_for
 * @see close_admin_form
 *
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 */
function include_admin_form_field($field, $html_options = array())
{
  echo get_admin_form_field($field, $html_options);
}

/**
 * Render an embed form in order to use with jQueryUi widgets.
 *
 * @return string The line representing the form
 * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
 */
function get_admin_embed_form($form_collection, $container_name)
{
  $label_and_add = $form_collection->renderLabel();
  $label_and_add .= jui_button_link('Ajouter', '@contacts_display_new',
    array(
      'class' => sprintf('%sAdd r_float', $container_name),
      'icon' => 'silk-add'
    ));

  $return = get_admin_form_fieldset_open_tag($label_and_add);
  $return .= '<tr><td colspan="2">';

  $return .= sprintf('<ul id="%sContainer">', $container_name);

  foreach ($form_collection as $index => $subform)
  {
    $return .= '<li>';

    $inputs = array();
    $helps  = array();
    $errors = '';

    if ($subform->hasError())
    {
      $errors = $subform->renderError();
    }

    foreach ($subform as $field)
    {
      $inputs[] = $field->render();
      $helps[]  = $field->renderHelp();
    }

    $return .= sprintf('%s%s%s', $errors, join(' ', $inputs), join(' ', $helps));

    $return .= '</li>';
  }
  $return .= '</ul>';

  $return .= '</td></tr>';

  return $return . get_admin_form_fieldset_close_tag();
}

function include_admin_embed_form($form, $container_name)
{
  echo get_admin_embed_form($form, $container_name);
}

/**
 * Displays the select options used to choose the type of a phone number/mail/etc.
 * (work, home, etc.)
 *
 * @param $type Can be Phone/Mail/Address. This parameter will be used to guess
 *              the form class name to retrieve the choices
 *              (using Contact$typeForm::getTypeChoices()).
 *
 * @return void
 * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
 */
function include_admin_embed_contact_type_select($type)
{
  $className = sprintf('Contact%sForm', ucfirst($type));

  if (!method_exists($className, 'getTypeChoices'))
  {
    throw new LogicException(sprintf('There is no method getTypeChoices in class %s', $className));
  }

  $first = true;
  foreach ($className::getTypeChoices() as $key => $label)
  {
    echo sprintf('<option value="%s"%s>%s</option>', $key, $first ? ' selected="selected"' : '', $label);

    $first = false;
  }
}

/**
 * Returns the right icon to display for the given visibility
 *
 * @param int $visibility The visibility.
 *
 * @return string The icon name (to use with jui_get_icon for instance)
 * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
 */
function get_icon_for_visibility($visibility)
{
  switch((int) $visibility)
  {
    case ContactQuery::PARENT_VISIBILITY:
      $icon = 'silk-lock_go';
      break;
    case ContactQuery::PRIVATE_VISIBILITY:
      $icon = 'silk-lock';
      break;
    case ContactQuery::PROTECTED_VISIBILITY:
      $icon = 'silk-shield';
      break;
    case ContactQuery::PUBLIC_VISIBILITY:
      $icon = 'silk-lock_open';
      break;
    default:
      throw new LogicException('Unknown visibility !');
  }

  return $icon;
}

function include_visibility_icon($visibility, $html_options=array())
{
  echo jui_get_icon(get_icon_for_visibility($visibility), $html_options);
}

/**
 * Displays a minimal field (just its html code and errors)
 *
 * @return void
 * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
 */
function include_raw_field($field, $attributes=array())
{
  echo $field->render($attributes);

  if ($field->hasError())
  {
    echo sprintf('(%s)', $field->getError());
  }
}

/**
 * render a large form field in the unified chCms way
 *
 * @return void
 * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
 */
function get_admin_form_large_field($field, $html_options=array())
{
  return  get_admin_form_field_wrapper_open_tag()
            .get_admin_form_field_input($field, array('colspan' => 2, 'class' => 'large_input'))
          .get_admin_form_field_wrapper_close_tag();
}

/**
 * render a large form field in the unified chCms way
 *
 * @return void
 * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
 */
function include_admin_form_large_field($field, $html_options=array())
{
  echo get_admin_form_large_field($field, $html_options);
}

function open_contact_form($form)
{
  echo '<form
  action="'.url_for('chCmsContactsDisplay/'.($form->isNew() ? 'create' : 'update').(!$form->isNew() ? '?id='.$form->getObject()->getContactId() : '')).'"
  method="post"
  name="'.$form->getName().'"
  id="form_'.$form->getName().'">';
}

function close_contact_form($form)
{
  include_stylesheets_for_form($form);
  include_javascripts_for_form($form);

  echo $form->renderHiddenFields();

  close_admin_form($form);
}

/**
 * include a fielset panel in a table can be setup with colspanfoar dynamique
 * display 
 * @param String $title 
 * @param int $colspan an integer for dynamic colpspan (e: count($nbContractors)
 * @return void
 * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
 **/
function include_admin_form_fieldset_spannable($title, $colspan=0)
{
  echo "<thead><tr><th colspan=".$colspan.">".content_tag('h2', __($title))."</th></tr></thead>";
}

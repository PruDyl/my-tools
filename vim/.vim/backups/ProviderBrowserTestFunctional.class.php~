<?php
/**
 * This file declare the sfProviderTestFunctional class.
 *
 * @package chCmsGuardExtraPlugin
 * @subpackage lib
 * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-06-20
 */

/**
 * Main class to ease test of differents provider
 */
class ProviderBrowserTestFunctional extends sfGuardTestFunctional
{
  /**
   * undocumented function
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function gotoLoginPage()
  {
    return $this
      ->click('Se connecter')
      ->with('response')->begin()
        ->isStatusCode(401)
        ->isValid()
      ->end()
      ;
  }
  /**
   * undocumented function
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function revoqueProvider($mail)
  {
    $auth = AuthenticationQuery::create()->findOneByAccountIdentifier($mail);
    return
      $this
      ->info("REVOQUE ".$mail."\n==================================== ")

      ->get('compte/myProfile')

      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'chCmsFrontendAccount')
        ->isParameter('action', 'myProfile')
      ->end()

      ->with('response')->begin()
        ->isStatusCode(200)
        ->isValid()
        ->checkElement('#providers tr td:contains("'.sprintf('%s', $auth->getAccountIdentifier()).'")')
      ->end()
      // end of block  1.1

      ->info(">>We can revoke the provider")
      ->with('response')->begin()
        ->checkElement('#providers tr:contains("'.$auth->getAccountIdentifier().'") td:eq(2) a', '/Annuler/')
      ->end() // end on response block

      ->info(">>The revoke link leads us to the right place")
      ->get('compte/associate/delete/'.$auth->getId())
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'Associate')
        ->isParameter('action', 'delete')
        ->isParameter('id', $auth->getId())
      ->end() // end on request block

      ->info(">>Once the revoke process id complete, we are redirected")
      ->with('request')->isRedirected()
      ->followRedirect()

      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'chCmsFrontendAccount')
        ->isParameter('action', 'myProfile')
      ->end()
      ; // end on request block
  }
  /**
   * undocumented function
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function checkProviderIsUnrevocable($mail)
  {
    $auth = AuthenticationQuery::create()->findOneByAccountIdentifier($mail);
    return
      $this
      ->info("Unrevoquable ".$mail)

      ->get('compte/myProfile')

      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'chCmsFrontendAccount')
        ->isParameter('action', 'myProfile')
      ->end()

      ->with('response')->begin()
        ->isStatusCode(200)
        ->isValid()
        ->checkElement('#providers tr td:eq(1)', sprintf('%s', $auth->getAccountIdentifier()))
      ->end()
      // end of block  1.1

      ->info(">>We cant revoke the provider")
      ->with('response')->begin()
        ->checkElement('#providers tr:contains("'.$auth->getAccountIdentifier().'") td:eq(2) a:contains("Annuler")', 0)
      ->end() // end on response block

      ->get(sprintf('/compte/associate/delete/%s', $auth->getId()))
        ->isStatusCode(404)
      ;
  }

  /**
   * signin the user with google openID process,
   * process info and return to website with processed information.
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function signinGoogleAccount($extra_parameters = array())
  {
    $this

      ->info("click  on google link")
        ->with('response')->begin()
          ->checkElement('a:contains("Profil Google")', 1)
        ->end() // end on response block
        ->click('Profil Google')

        ->info(">>We are redirected on google account")
        //check routing is OK
        ->with('request')->begin()
          ->isMethod('get')
          ->isParameter('module', 'GoogleAuthentication')
          ->isParameter('action', 'redirect')
        ->end()

        // check the response
        ->info("check redirected to google provider")
          ->isRedirected()
        // end of block check redirected to google provider

      ->info('Emulate communication with google');

    $openid = new GoogleOpenIdConsumerTester('http://'.$_SERVER['SERVER_NAME'], $this->getRequest());
    $openid->prepareValidRequest($this->getRequest(), $extra_parameters);
    $params = $this->getRequest()->getParameterHolder()->getAll();
    var_dump($this->getRequest()):exit;

    $this
      ->info('Emulate google processed data response')
      ->get('/register/google/verify', $params)

      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'GoogleAuthentication')
        ->isParameter('action', 'verify')
      ->end()

      // check the response
      ->with('response')->begin()
        ->isStatusCode(200)
        ->isValid()
        ->checkElement('a:contains("Retour à t-resa")')
      ->end()
      // end of get /register/google/verify

      ->click('Retour à t-resa');

    return $this;
  }

  /**
   * undocumented function
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function addPassword($password)
  {
    $securityForm = new PluginchCmsUserSecurityForm;
    $this
      ->info("Add New Password ".$password)

      ->get('compte/myProfile')

      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'chCmsFrontendAccount')
        ->isParameter('action', 'myProfile')
      ->end()

      ->with('response')->begin()
        ->isStatusCode(200)
        ->isValid()
  //      ->debug()
        ->checkForm($securityForm)
      ->end()

      ->click('Enregistrer', array( $securityForm->getName() => array(
                                  'password' => array(
                                      'new_pass'=> $password,
                                      'new_pass_confirm' => $password))))

      ->with('request')->begin()
        ->isMethod('post')
        ->isParameter('module', 'chCmsFrontendAccount')
        ->isParameter('action', 'myProfile')
      ->end()

      // check the response
      ->with('form')->begin()
        ->hasErrors(false)
      ->end() // end on form block

      ->with('response')->begin()
        ->isValid()
      ->end() // end on response block
      ;
    return $this;
      // end of click Enregistrer
  }
  /**
   * signin the user with openID process,
   * process info and return to website with processed information.
   * this is not really possible due to to many requests to an openid server.
   * this action directly returns to registration with $extra_parameters as gitven info
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function signinOpenIdAccount($extra_parameters = array(), $identity = 'http://carpe-hora-test.myopenid.com/')
  {
    $params = array_merge(array(
      'mail'      => 'myopenid@carpe-hora.com',
      'username'  => 'carpehora',
      'firstname' => 'Carpe',
      'lastname'  => 'Hora'), $extra_parameters);
    $this

      ->info("click  on openid link")
        ->get('/login')
        ->with('response')->begin()
          ->isStatusCode(401)
          ->isValid()
          ->checkElement('div.ch-toolbar a:contains("OpenId")', 1)
        ->end()

        ->click('OpenId')

        ->info(">>We are redirected on openid account")
        //check routing is OK
        ->with('request')->begin()
          ->isMethod('get')
          ->isParameter('module', 'OpenIdAuthentication')
          ->isParameter('action', 'askForProvider')
        ->end()

        // end of block check redirected to openid provider
        ->click('Se connecter', array('openid' => array('identity' => $identity)))

        //check routing is OK
        ->with('request')->begin()
          ->isMethod('post')
          ->isParameter('module', 'OpenIdAuthentication')
          ->isParameter('action', 'recieveProvider')
        ->end()

        // check the response
        ->with('response')->begin()
          ->isForwardedTo('OpenIdAuthentication', 'redirect')
          ->isRedirected()
        ->end()
        // end of post /register/with/openid

      ->info('Emulate communication with openid');

      $authentication = new OpenIdAuthentication();
      $authentication->setUserToken($identity);
      $authentication->setAccountIdentifier($identity);

      $storage = $this->browser->getContext()->getStorage();
      $storage->initialize($storage->getOptions());
      $user = $this->getUser();
      $user->initialize($this->browser->getContext()->getEventDispatcher(), $storage);
      $user->setchCmsGuardExtraProvider($authentication);
      $user->setchCmsGuardExtraProviderForm('OpenIdRegistrationForm');
      $user->setchCmsGuardExtraProviderFormValues($params);
      $user->shutdown();
      $storage->shutdown();

    $this
      ->get('/register');

    return $this;
  }

  /**
   * signin the user with google openID process,
   * process info and return to website with processed information.
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function signinYahooAccount($extra_parameters = array())
  {
    $this

      ->info("click  on yahoo link")
        ->with('response')->begin()
          ->checkElement('div.ch-toolbar a:contains("Profil Yahoo")', 1)
        ->end() // end on response block
        ->click('Profil Yahoo')

        ->info(">>We are redirected on yahoo account")
        //check routing is OK
        ->with('request')->begin()
          ->isMethod('get')
          ->isParameter('module', 'YahooAuthentication')
          ->isParameter('action', 'redirect')
        ->end()

        // check the response
        ->info("check redirected to yahoo provider")
          ->isRedirected()
        // end of block check redirected to yahoo provider

      ->info('Emulate communication with yahoo');

    $openid = new YahooOpenIdConsumerTester('http://'.$_SERVER['SERVER_NAME'], $this->getRequest());
    $openid->prepareValidRequest($this->getRequest(), $extra_parameters);
    $params = $this->getRequest()->getParameterHolder()->getAll();

    $this
      ->info('Emulate yahoo processed data response')
      ->get('/register/yahoo/verify', $params)

      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'YahooAuthentication')
        ->isParameter('action', 'verify')
      ->end()

      // check the response
      ->with('response')->begin()
        ->isStatusCode(200)
        ->isValid()
        ->checkElement('a:contains("Retour à t-resa")')
      ->end()
      // end of get /register/yahoo/verify

      ->click('Retour à t-resa');

    return $this;
  }
} // END OF sfProviderTestFunctionnal
// vim: ft=symfony.php.sftest

<?php

class chCmsBasicUser
{
  public static function methodNotFound(sfEvent $event)
  {
    if (method_exists('chCmsBasicUser', $event['method']))
    {
      $event->setReturnValue(call_user_func_array(
        array('chCmsBasicUser', $event['method']),
        array_merge(array($event->getSubject()), $event['arguments'])
      ));
      return true;
    }
  }

  protected static function getId(sfUser $user)
  {
    if (!$user->isAuthenticated())
    {
      return null;
    }
    return $user->getGuardUser()->getId();
  }

  protected static function getMail(sfUser $user)
  {
    if (!$user->isAuthenticated())
    {
      return null;
    }
    $mailClass = sprintf('get%s', ucfirst(chTools::camelize(chTools::get('sf_guard_plugin_mail_table_name', ''))));
    $mailMethod = sprintf('get%s', ucfirst(chTools::camelize(chTools::get('sf_guard_plugin_mail_field_name', ''))));
    if (method_exists($user, $mailClass))
    {
      $mailObject = call_user_func(array($user, $mailClass));
    }
    elseif (method_exists($user->getGuardUser(), $mailClass))
    {
      $mailObject = call_user_func(array($user->getGuardUser(), $mailClass));
    }
    elseif (method_exists($user->getGuardUser(), $mailClass.'s'))
    {
      $mailObject = call_user_func(array($user->getGuardUser(), $mailClass.'s'));
    }
    else
    {
      $mailObject = $user->getGuardUser();
    }
    if (is_array($mailObject))
    {
      $mailObject = $mailObject[0];
    }
    if ($mailObject && method_exists($mailObject, $mailMethod))
    {
      return call_user_func(array($mailObject, $mailMethod));
    }
    throw new sfException('Unable to retrieve mail field');
  }

  protected static function addMessage(sfUser $user, $type, $message)
  {
    $args = func_get_args();

    sfApplicationConfiguration::getActive()->loadHelpers('I18N');

    //remove trailing user and type
    array_shift($args);
    array_shift($args);

    //get current messages
    $messages = $user->getAttribute($type, array(), 'chCmsGuard');

    $messages[] = call_user_func_array('__', $args);

    $user->setAttribute($type, $messages, 'chCmsGuard');
  }

  protected static function hasMessage(sfUser $user, $type)
  {
    return  $user->hasAttribute($type, 'chCmsGuard') &&
            is_array($messages = $user->getAttribute($type, null, 'chCmsGuard')) &&
            count($messages);
  }

  protected static function getMessages(sfUser $user, $type)
  {
    return $user->getAttribute($type, array(), 'chCmsGuard');
  }

  protected static function resetMessages(sfUser $user)
  {
    $user->getAttributeHolder()->remove('info', null, 'chCmsGuard');
    $user->getAttributeHolder()->remove('error', null, 'chCmsGuard');
  }

  protected static function addInfo(sfUser $user, $message)
  {
    $args = func_get_args();
    array_splice($args, 1, 0, 'info');
    call_user_func_array(array('chCmsBasicUser', 'addMessage'), $args);
  }

  protected static function addError(sfUser $user, $message)
  {
    $args = func_get_args();
    array_splice($args, 1, 0, 'error');
    call_user_func_array(array('chCmsBasicUser', 'addMessage'), $args);
  }

  public static function changeAuthentication(sfEvent $event)
  {
    if ($event['authenticated'])
    {
      self::signIn($event->getSubject());
    }
    else
    {
      self::signOut($event->getSubject());
    }
  }

  protected static function signIn(sfUser $user)
  {
  }

  protected static function signOut(sfUser $sf_user)
  {
    // clear session on logout
    $sf_user->getAttributeHolder()->clear();
  }

  protected static function hasError(sfUser $user)
  {
    return self::hasMessage($user, 'error');
  }

  protected static function hasInfo(sfUser $user)
  {
    return self::hasMessage($user, 'info');
  }

  protected static function getErrors(sfUser $user)
  {
    return self::getMessages($user, 'error');
  }

  protected static function getInfos(sfUser $user)
  {
    return self::getMessages($user, 'info');
  }

  /**
   * return the user theme
   *
   * @return string
   * @author Ludovic Pell√© <ludovic_pelle@carpe-hora.com>
   **/
  public static function getTheme(sfUser $sf_user)
  {
    return chTools::get('theme', 'smoothness');
  }
}


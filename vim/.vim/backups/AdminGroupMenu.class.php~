<?php
/**
 * This file declare the AdminGroupMenu class.
 *
 * @package chCmsApplicationPlugin
 * @subpackage Menu
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2010
 * @since 2010-12-17
 */

/**
 * the admin panel menu is a menu that list all panels for an admin panel category.
 * this is not a Menu interface as it is neither a singleton nor regiters on an event.
 *
 * @see AdminMenu
 */
class AdminGroupMenu extends BaseMenu
{
  /**
   * generate the url
   *
   * @return string
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function generateUrl($panel_id = null, $parameters = array(), $absolute = false)
  {
    if(is_null($panel_id) || !strlen($panel_id))
    {
      $panel_id = $this->getIndexRouteName();
    }

//    $options = sfContext::getInstance()->getRouting()->getOptions();
    $options = self::getRouting()->getOptions();

    $route = $this->getMenuRoute($panel_id);

    if(!$route)
    {
      throw new sfError404Exception(sprintf('unable to find route for id %s', $panel_id));
    }

    // now fix for constistency if route is request and object given
    if(!is_array($parameters) && !($parameters instanceof sfOutputEscaper) && !($route instanceof sfPropel15Route))
    {
      $parameters = $parameters->toArray();
    }

    return $this->fixGeneratedUrl(
                $route->generate($parameters, $options['context'], $absolute), 
                $options['context'], 
                $absolute
              );
  }

  /**
   * dirty as possible, it should be a good thing to override the routing class for the project.
   * @see generateUrl
   * @see sfRouting
   */
  protected function fixGeneratedUrl($url, $context=array(), $absolute = false)
  {
    if (isset($context['prefix']))
    {
      if (0 === strpos($url, 'http'))
      {
        $url = preg_replace('#https?\://[^/]+#', '$0'.$context['prefix'], $url);
      }
      else
      {
        $url = $context['prefix'].$url;
      }
    }

    if ($absolute && isset($context['host']) && 0 !== strpos($url, 'http'))
    {
      $url = 'http'.(isset($context['is_secure']) && $context['is_secure'] ? 's' : '').'://'.$context['host'].$url;
    }

    return $url;
  }

  /**
   * the constructor for AdminGroupMenu.
   *
   * @param AdminMenu $adminMenu    the admin panel main route
   * @param string    $url_prefix   the url prefix to use for urls (/my-group)
   * @param string    $name_prefix  the name prefix to use for routes (my_group_)
   */
  public function __construct(AdminMenu $adminMenu, $url_prefix, $name_prefix)
  {
    $this->setRoutePrefix($name_prefix);
    $this->setUrlPrefix($url_prefix);
    $this->setAdminMenu($adminMenu);
  }

  /**
   * the route name prefix (for generation)
   * @access protected
   * @var string
   */
   protected $routePrefix;
  
  /**
   * getter for routePrefix
   * @access public
   *
   * @return string the routePrefix value
   */
  public function getRoutePrefix()
  {
    return $this->routePrefix;
  }
  
  /**
   * setter for routePrefix
   * @access public
   *
   * @param string $routePrefix the route prefix.
   * @return string the routePrefix value
   */
  public function setRoutePrefix($routePrefix)
  {
    return $this->routePrefix = $routePrefix;
  }

  /**
   * prefixes the route name
   *
   * @param string $route the route name to prefix
   * @return string
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function normalizeRouteName($route = '')
  {
    if(strlen($route))
    {
      return sprintf('%s_%s', $this->getRoutePrefix(), $route);
    }
    //none given ? this is the index
    return $this->getIndexRoute();
  }

  /**
   * return the index route
   *
   * @return chCmsPanelRoute
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getIndexRoute()
  {
    foreach($this->getAccessibleMenuEntriesForUser($this->getIndexRouteName()) as $id => $title)
    {
      return $this->getMenuRoute($id);
    }
    return false;
  }

  /**
   * return the route parameters
   **/
  public function getRouteParameters($item = '')
  {
    return array();
  }
  
  /**
   * the url prefix
   * @access protected
   * @var string
   */
   protected $urlPrefix;
  
  /**
   * getter for urlPrefix
   * @access public
   *
   * @return string the urlPrefix value
   */
  public function getUrlPrefix()
  {
    return $this->urlPrefix;
  }
  
  /**
   * setter for urlPrefix
   * @access public
   *
   * @param string $urlPrefix the url prefix to use for every item of this group
   * @return string the urlPrefix value
   */
  public function setUrlPrefix($urlPrefix)
  {
    return $this->urlPrefix = $urlPrefix;
  }

  /**
   * computes the internal url by adding the prefix.
   * if no url is given, then the index url is used.
   *
   * @param string $url the sub url.
   * @return string
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function normalizeUrl($url='')
  {
    if(strlen($url))
    {
      $url = sprintf('%s/%s', $this->getUrlPrefix(), $url);
    }
    else
    {
      $url = $this->getIndexUrl();
    }

    return sprintf('/%s', join('/', array_filter(explode('/', $url))));
  }

  /**
   * return the group index url
   *
   * @return string
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getIndexUrl()
  {
    return $this->getUrlPrefix();
  }

  /**
   * determines wether the url matches this admin config menu and if so, returns the route parameters
   *
   * @return array|Boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function matchesUrl($url, $context = array())
  {
    if(0 !== strpos($url, $this->getUrlPrefix()))
    {
      return false;
    }
    throw new sfException(join(', ', self::getUser()->getCredentials()));

    //matches the url start, so this handles the request.
    foreach($this->getMenuRoutes() as $id => $item)
    {
      if(false !== ($parameters = $item->matchesUrl($url, $context)))
      {
        if (sfConfig::get('sf_logging_enabled'))
        {
          if($item->isPanelRoute())
          {
            $options = $item->getOptions();
            $this->log(sprintf(
                      'AdminGroupMenu: matches route "%s" (%s/%s)', 
                      $id, $options['module'], $options['component']),
                    sfLogger::INFO);
          }
          else
          {
            $this->log(sprintf(
                      'AdminGroupMenu: matches route "%s" (%s/%s)', 
                      $id, $parameters['module'], $parameters['action']),
                    sfLogger::INFO);
          }
        }
        
        return $parameters;
      }
    }

    if (sfConfig::get('sf_logging_enabled'))
    {
      $this->log(sprintf('no matching route for url %s', $url), sfLogger::WARNING);
    }

    // now the index is registered, so we do return it.
    $route = $this->getIndexRoute();
    if ($route && $route->isAccessibleForUser(self::getUser()))
    {
      if ($route->isAccessibleForUser(self::getUser()))
      {
        return $route->getDefaultParameters();
      }
      throw new sfError404Exception('this content is protected');
    }
    throw new sfError404Exception('unable to find route');
  }

  /**
   * the admin route, used for the admin menu
   * the admin route is the main route for admin panel.
   * this route is registered in the main routing system.
   *
   * @access protected
   * @var chCmsApplicationAdminRoute
   * @see chCmsApplicationPluginRouting
   */
   protected $adminRoute;
  
  /**
   * getter for adminRoute
   * @access public
   *
   * @return chCmsApplicationAdminRoute the adminRoute value
   */
  public function getAdminRoute()
  {
    return $this->adminRoute;
  }
  
  /**
   * setter for adminRoute
   * @access public
   *
   * @return chCmsApplicationAdminRoute the adminRoute value
   */
  public function setAdminRoute($adminRoute)
  {
    return $this->adminRoute = $adminRoute;
  }

  /**
   * the AdminMenu instance
   * @access protected
   * @var AdminMenu
   */
   protected $adminMenu;
  
  /**
   * getter for admiMenu
   * @access public
   *
   * @return AdminMenu the admiMenu value
   */
  public function getAdminMenu()
  {
    return $this->adminMenu;
  }
  
  /**
   * setter for admiMenu
   * also set the admin route
   * @access public
   *
   * @return AdminMenu the admiMenu value
   */
  public function setAdminMenu($adminMenu)
  {
    $this->setAdminRoute($adminMenu->getAdminRoute());
    return $this->adminMenu = $adminMenu;
  }
  

  /**
   * the group title
   * @access protected
   * @var string
   */
   protected $title;
  
  /**
   * getter for title
   * @access public
   *
   * @return string the title value
   */
  public function getTitle()
  {
    return $this->title;
  }
  
  /**
   * setter for title
   * @access public
   *
   * @return string the title value
   */
  public function setTitle($title)
  {
    return $this->title = $title;
  }

  /**
   * the menu routes list ($route_id => $route)
   * @access protected
   * @var array<BasechCmsAdminMenuItemRoute>
   */
   protected $menuRoutes = array();
  
  /**
   * getter for menuRoute
   * @access public
   *
   * @param string $id_or_uri the route id to retrieve or matching uri
   * @return BasechCmsAdminMenuItemRoute the menuRoute value
   */
  public function getMenuRoute($id_or_uri)
  {
    if ($this->hasMenuRoute($id_or_uri))
    {
      return $this->menuRoutes[$id_or_uri];
    }
    return $this->matchesUrl($id_or_uri, array());   
  }
  
  /**
   * getter for menuRoute
   * @access public
   *
   * @return array<BasechCmsAdminMenuItemRoute> the menuRoute value
   */
  public function getMenuRoutes()
  {
    return $this->menuRoutes;
  }
  
  /**
   * adds a menuRoute
   * @access protected
   *
   * @param string $route_id the menu route id to check existance
   * @param BasechCmsAdminMenuItemRoute $route the menu route to add
   * @return AdminGroupMenu
   *
   * @see addPanel
   * @see addAction
   */
  protected function addMenuRoute($route_id, sfRoute $route)
  {
    if(sfConfig::get('sf_debug', false))
    {
      $this->log(sprintf(
                'connect admin %s route "%s" (%s)', 
                $route->isPanelRoute() ? 'panel' : 'action',
                $route_id,
                $route->getPattern()),
              sfLogger::INFO);
    }
    $this->menuRoutes[$route_id] = $route;
    return $this;
  }
  
  /**
   * checks wether or not the $route_id matches an route
   *
   * @param string $route_id the menu route id to check existance
   * @return boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function hasMenuRoute($route_id)
  {
    return array_key_exists($route_id, $this->menuRoutes);
  }


  /**
   * the list of available panels id.
   * @access protected
   * @var array<string>
   */
  protected $panels;

  /**
   * getter for $panels. retruns all the panels routes
   * @access Panels
   *
   * @return array<string> the $panels value
   */
  public function getPanels()
  {
    return $this->panels;
  }

  /**
   * determines wether or not the panel with $panel_id exists.
   *
   * @param string $panel_id the panel id to look for
   * @return boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function hasPanel($panel_id)
  {
    return in_array($panel_id, $this->panels);
  }

  /**
   * return given panel
   *
   * @param string $panel_id the panel id to look for
   * @return BasechCmsAdminMenuItemRoute
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getPanel($panel_id)
  {
    return $this->panels[$panel_id];
  }
  
  /**
   * create a chCmsAdminMenuPanelRoute and 
   * adds a panel route to the menuRoutes, and registers it into the panel list.
   *
   * @param string $route_id                    the menu route id
   * @param array  $defaults      default values for route
   * @param array  $requirements  requirements for route
   * @param array  $options       options for route
   * @param string $uri           the uri to use (optional)
   * @return AdminGroupMenu
   *
   * @see connectPanelRoute
   */
  public function addPanelRoute($panel_id, array $defaults = array(), array $requirements = array(), array $options = array(), $uri = null)
  {
    $route = new chCmsAdminMenuPanelRoute(
        $this->normalizeUrl(is_null($uri) ? str_replace('_', '/', $panel_id) : $uri).'.:sf_format',
        array_merge(array('sf_format' => 'html'), $defaults),
        $requirements,
        array_merge(array('group' => $this), $options));

    return $this->connectPanelRoute($panel_id, $route);
  }

  /**
   * registers a propel panel
   *
   * @param string $route_id                    the menu route id
   * @param array  $defaults      default values for route
   * @param array  $requirements  requirements for route
   * @param array  $options       options for route
   * @param string $uri           the uri to use (optional)
   * @return AdminGroupMenu
   *
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function addPropelPanel($panel_id, array $defaults = array(), array $requirements = array(), array $options = array(), $uri = null)
  {
    $route = new chCmsAdminMenuPanelPropelRoute(
        $this->normalizeUrl(is_null($uri) ? str_replace('_', '/', $panel_id) : $uri).'.:sf_format',
        array_merge(array('sf_format' => 'html'), $defaults),
        $requirements,
        array_merge(array('group' => $this), $options));

    return $this->connectPanelRoute($panel_id, $route);
  }

  /**
   * adds a panel route to the menuRoutes, and registers it into the panel list.
   * this is for advanced usage, you should use addPanel when possible.
   * 
   * @param string $panel_id the panel id
   * @param chCmsAdminMenuActionRoute|chCmsAdminMenuActionPropelRoute $panel_route
   *
   * @return AdminGroupMenu
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   *
   * @see addPanel
   * @see addRoute
   **/
  public function connectPanelRoute($panel_id, sfRoute $panel_route)
  {
    $this->addMenuRoute($panel_id, $panel_route);
    $this->panels[] = $panel_id;

    return $this;
  }

  /**
   * adds a panel to the menu.
   * credentials are passed to the user hasAdminCredentials. By default, 
   * this function links to the isAccessibleForUser security function.
   *
   * @param string $panel_id    the panel id.
   * @param string $module      the module to link to
   * @param string $component   the component to link to
   * @param string $credentials the credentials required to access this panel.
   * @param array  $options     the aditional options to pass to the route.
   *
   * @return AdminMenuGroup
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   * 
   * @see addPanel
   * @see addRoute
   * @see computePanelRoute
   **/
  public function addPanel($panel_id, $module, $component, $credentials, $options=array(), $uri = null)
  {
    $this->addPanelRoute(
            $panel_id, 
            array(),
            array(),
            array_merge(array('module' => $module, 'component' => $component, 'credentials' => $credentials), $options),
            $uri);

    return $this;
  }

  /**
   * register the index panel
   *
   * @return AdminMenuGroup
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function registerIndexPanel()
  {
    $this->connectPanelRoute('index', new chCmsAdminMenuIndexPanelRoute($this->getIndexUrl(), $this));
    $this->setIndexRouteName('index');
    return $this;
  }

  /**
   * register a new route collection
   *
   * @param string $prefix the prefix to use
   * @param array  $route  the route collection options to use
   * @return AdminMenuGroup
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   */
  public function addRouteCollection($prefix, array $options, $uri = null)
  {
    $route = new chCmsAdminMenuPropelRouteCollection(array_merge(array(
                'name' => $prefix,
                'prefix_path' => $this->normalizeUrl(is_null($uri) ? $prefix : $uri),
                'group' => $this), $options));

    $routes = $route instanceof sfRouteCollection ? $route : array($prefix => $route);
    foreach (sfPatternRouting::flattenRoutes($routes) as $name => $route)
    {
      if($route->isPanelRoute())
      {
        $this->connectPanelRoute($name, $route);
      }
      else
      {
        $this->connectActionRoute($name, $route);
      }
    }
    return $this;
  }

  /**
   * the index panel id
   * @access protected
   * @var string
   */
   protected $indexRouteName;
  
  /**
   * getter for index
   * @access public
   *
   * @return string the index value
   */
  public function getIndexRouteName()
  {
    if(isset($this->indexRouteName))
    {
      return $this->indexRouteName;
    }
    //none ? so the first menu entry
    foreach($this->getAccessibleMenuEntriesForUser() as $panel_id => $title)
    {
      return $panel_id;
    }
    //still none ?
    $this->registerIndexPanel();
    return $this->indexRouteName;
  }
  
  /**
   * setter for index
   * @access public
   *
   * @param string $panel_id the id of panel to set as index
   * @return AdminGroupMenu
   */
  public function setIndexRouteName($panel_id)
  {
    if(!$this->hasPanel($panel_id))
    {
      throw new sfException(sprintf('no panel with id %s in admin menu group %s', $panel_id, $this->getRoutePrefix()));
    }
    $this->indexRouteName = $panel_id;

    return $this;
  }
  

  /**
   * the list of actions id
   * @access protected
   * @var array<string>
   */
  protected $actions;
  
  /**
   * getter for $actions
   * @access Actions
   *
   * @return array<string> the $actions value
   */
  public function getActions()
  {
    return $this->actions;
  }  
  
  /**
   * creates an action route and connect it 
   *
   * @param string $route_id          the action route id
   * @param array  $default       default values for route
   * @param array  $requirements  requirements for route
   * @param array  $options       options for route
   * @param string $uri           the uri to use (optional)
   * @return AdminGroupMenu
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   *
   * @see addAction
   * @see addRoute
   **/
  public function addActionRoute($action_id, array $defaults = array(), $requirements =array(), $options = array(), $uri = null)
  {
    $route = new chCmsAdminMenuActionRoute(
        $this->normalizeUrl(is_null($uri) ? str_replace('_', '/', $action_id) : $uri).'.:sf_format',
        array_merge(array('sf_format' => 'html'), $defaults),
        $requirements,
        array_merge(array('group' => $this), $options));

    return $this->connectActionRoute($action_id, $route);
  }

  /**
   * adds a propel action
   *
   * @param string $route_id          the action route id
   * @param array  $default       default values for route
   * @param array  $requirements  requirements for route
   * @param array  $options       options for route
   * @param string $uri           the uri to use (optional)
   * @return AdminGroupMenu
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   *
   * @see addAction
   * @see addRoute
   **/
  public function addPropelAction($action_id, array $defaults = array(), $requirements =array(), $options = array(), $uri = null)
  {
    $route = new chCmsAdminMenuActionPropelRoute(
        $this->normalizeUrl(is_null($uri) ? str_replace('_', '/', $action_id) : $uri).'.:sf_format',
        array_merge(array('sf_format' => 'html'), $defaults),
        $requirements,
        array_merge(array('group' => $this), $options));

    return $this->connectActionRoute($action_id, $route);
  }

  /**
   * adds an action route to the menuRoutes, and registers it into the action list.
   * this is for advanced usage, you should use addAction when possible.
   *
   * @param string $route_id          the action route id
   * @param chCmsAdminMenuActionRoute|chCmsAdminMenuActionPropelRoute $action_route
   *
   * @return AdminGroupMenu
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function connectActionRoute($action_id, sfRoute $action_route)
  {
    $this->addMenuRoute($action_id, $action_route);
    $this->actions[] = $action_id;
    
    return $this;
  }

  /**
   * adds an action to the menu.
   *
   * @param string $action_id   the action id.
   * @param string $module      the module to link to
   * @param string $action      the action to link to
   * @param string $credentials the credentials required to access this panel.
   * @param array  $options     the aditional options to pass to the route.
   *
   * @return AdminGroupMenu
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   *
   * @see addActionRoute
   * @see addRoute
   **/
  public function addAction($action_id, $module, $action, $credentials, $options=array(), $uri = null)
  {
    $this->addActionRoute(
            $action_id,
            array('module' => $module, 'action' => $action),
            array(),
            array_merge(array('credentials' => $credentials), $options),
            $uri);

    return $this;
  }

  /**
   * adds a panel entry to the grop
   *
   * @param string $panel_id  the id of panel to add to menu entry
   * @param string $title     the title to use for menu
   *
   * @return AdminGroupMenu
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function addMenuEntry($panel_id, $title)
  {
    if(!$this->hasPanel($panel_id))
    {
      throw new sfException(sprintf('no panel with id %s in admin menu group %s', $panel_id, $this->getRoutePrefix()));
    }
    $this->addItem($panel_id, $title);
    return $this;
  }

  /**
   * returns all the menu entries
   *
   * @return array<>
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getMenuEntries()
  {
    return $this->getItems();
  }

  /**
   * returns the title for given menu entry
   *
   * @return string
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getMenuEntry($panel_id)
  {
    return $this->getItem($panel_id);
  }

  /**
   * return the list of menu entry current user can access
   *
   * @return array
   **/
  public function getAccessibleMenuEntriesForUser()
  {
    $entries = array();
    $user = self::getUser();

    foreach ($this->getMenuEntries() as $panel_id => $title) 
    {
      if ($this->getMenuRoute($panel_id)->isAccessibleForUser($user))
      {
        $entries[$panel_id] = $title;
      }
    }

    return $entries;
  }

  /* items management */
  
  /**
   * the menu items 
   * @access protected
   * @var array
   */
   protected $items = array();
  
  /**
   * getter for items
   * @access public
   *
   * @return array the items value
   */
  public function getItems()
  {
    return $this->items;
  }
  
  /**
   * returns the item mathcing given name
   *
   * @param string $item_name the item to look for
   * @return mixed
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getItem($item_name)
  {
    return $this->items[$item_name];
  }

  /**
   * checks wether or not given item key is referenced
   *
   * @param string $item_name the item to look for
   * @return boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function hasItem($item_name)
  {
    return isset($this->items[$item_name]);
  }

  /**
   * setter for items
   * @access public
   *
   * @return array the items value
   */
  public function addItem($key, $value)
  {
    return $this->items[$key] = $value;
  }
  
  /**
   * the html options to use for menu item rendering
   * @access protected
   * @var array
   */
   protected $htmlOptions;
  
  /**
   * getter for htmlOptions
   * @access public
   *
   * @return array the htmlOptions value
   */
  public function getHtmlOptions()
  {
    return $this->htmlOptions;
  }
  
  /**
   * setter for htmlOptions
   * @access public
   *
   * @return array the htmlOptions value
   */
  public function setHtmlOptions($opt)
  {
    return $this->htmlOptions = $opt;
  }

  public function log($message, $level = null)
  {
    $this->getAdminMenu()->log($message, $level);
  }
  
} // END OF AdminGroupMenu

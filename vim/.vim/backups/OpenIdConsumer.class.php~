<?php
/**
 * This file declare the OpenIdConsumer class.
 *
 * @package chCmsGuardExtraPlugin
 * @subpackage provider
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-06-18
 */

require_once(sfConfig::get('sf_plugins_dir'). '/chCmsGuardExtraPlugin/lib/vendor/openid.php');

/**
 * the generic open id consumer
 */
class OpenIdConsumer extends BaseConsumer
{
  protected $lightOpenID;
  protected $request;

  public function __construct($realm, $sfRequest, $providerUrl)
  {
    if (!is_null($providerUrl))
    {
      $this->setProviderUrl($providerUrl);
    }

    if (is_null($this->getProviderUrl()))
    {
      throw new LogicException('you have to provide a provider url for first openId connection');
    }

    $this->request = $sfRequest;
    $this->realm = $realm;
    $this->lightOpenId = new LightOpenID();
    $this->lightOpenId->identity = $this->getProviderUrl();
    $this->lightOpenId->realm = $this->realm;
    $this->setRequestParams($this->lightOpenId);
  }

  /**
   * prepare the openId request
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected function setRequestParams($lightOpenId)
  {
    $lightOpenId->required = array('contact/email');
    $lightOpenId->optional = array('namePerson', 'namePerson/friendly', 'namePerson/first', 'namePerson/last');
  }

  /**
   * Constructs the login URL for the user.
   *
   * @param String $returnTo URL to return to after login.
   * @return String URL
   */
  public function getLoginUrl($returnTo)
  {
    $this->lightOpenId->returnUrl = $returnTo;

    return $this->lightOpenId->authUrl();
  }

  /**
   * Checks GET and POST data for a valid OpenID response.
   *
   * @return boolean True, if a valid user identifier was found.
   */
  public function verifyLogin()
  {
    if(!$this->lightOpenId->validate())
    {
      return false;
    }

    $this->initUserAttributes($this->lightOpenId->getAttributes());

    return true;

  }

  /**
   * set the provider url
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function setProviderUrl($url)
  {
    $this->cachePut('provider', $url);
  }

  /**
   * return the provider url
   *
   * @return String
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getProviderUrl()
  {
    return $this->cacheGet('provider');
  }

  protected function getProviderName()
  {
    return 'OpenID';
  }

  /**
   * Returns the account identifier (username, mail or sth like that
   * depending on the provider)
   *
   * @return string The identifier.
   * @author Kevin Gomez <contact@kevingomez.fr>
   **/
  public function getAccountIdentifier()
  {
    return $this->getProviderUrl();
  }

  /**
   * sanitize the returned openid key
   *
   * @return String
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected function sanitizeAttributeKey($key)
  {
    switch($key)
    {
      case 'contact/email':
        return 'email';

      case 'namePerson/friendly':
        return 'nickname';

      case 'namePerson/last':
        return 'lastname';

      case 'namePerson/first':
        return 'firstname';

      default:
        return $key;
    }
  }
} // END OF OpenIdConsumer

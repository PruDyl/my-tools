<?php

/**
 * chCmsGuardExtraPlugin configuration.
 *
 * @package     chCmsGuardExtraPluginConfiguration
 * @subpackage  config
 * @author      Camille
 * @version     SVN: $Id$
 */
class chCmsGuardExtraPluginConfiguration extends sfPluginConfiguration
{
  const VERSION = '1.0.0-DEV';

  /**
   * @see sfPluginConfiguration
   */
  public function initialize()
  {
    $this->dispatcher->connect(
        'user.method_not_found',
        array('chCmsGuardExtraUser', 'methodNotFound'));

    $this->dispatcher->connect(
        'user.method_not_found',
        array('chCmsGuardExtraUserMessage', 'methodNotFound'));

    $this->dispatcher->connect(
        'routing.load_configuration',
        array('chCmsGuardExtraRouting', 'listenToRoutingLoadConfigurationEvent'));

    $this->dispatcher->connect(
        'context.load_factories',
        array($this, 'listenToLoadFactoryEvent'));
  }

  /**
  * listenToLoadFactoryEvent
  *
  * @param sfEvent $event
  */
  public function listenToLoadFactoryEvent($event)
  {
    self::$user = $event->getSubject()->getUser();
    BaseConsumer::setSfUser(self::$user);
  }

  /**
   * the current application user if loaded
   */
  protected static $user;


  /**
   * determine if the user has been set or not
   *
   * @return {boolean}
   */
  public static function hasUser()
  {
    return !is_null(self::$user);
  }

  /**
   * return the current user
   *
   * @return {myUser|null}
   *
   * @see chCmsBugTrackerPluginConfiguration::hasUser
   */
  public static function getUser()
  {
    return self::$user;
  }

  /**
  * return the available profile implementations
  *
  * @return array
  */
  public static function getAvailableProfileImplementations()
  {
    return array('GoogleAuthentication', 'YahooAuthentication', 'OpenIdAuthentication', 'TwitterAuthentication');
  }

  /**
   * return activated modules for this application
   *
   * @return array(String) openid module names
   * @author Ludovic Pell√© <ludovic_pelle@carpe-hora.com>
   **/
  public static function getEnabledProfileImplementationsModules()
  {
    // get all implementation
    $profilImplementationsModules = chCmsGuardExtraPluginConfiguration::getAvailableProfileImplementations();

    // intersect with enabled modues
    $enabledModules = array_intersect($profilImplementationsModules, sfConfig::get('sf_enabled_modules'));

    return $enabledModules;
  }
}

<?php

/**
 * CompanyPreferences form.
 *
 * @package    T-resa-pro
 * @subpackage form
 * @author     Julien Muetton <julien_muetton@carpe-hora.com>
 * @version    SVN: $Id: sfPropelFormTemplate.php 10377 2008-07-21 07:10:32Z dwhittle $
 */
class CompanyPreferencesForm extends BaseCompanyPreferencesForm
{
  /**
   * returns choices for form display
   * @return array
   */
  public static function getagendaStartDisplayTimeFormChoice()
  {
    $hours = array();
    for($i=0; $i<19; $i++)
    {
      $hours[$i] = ($i) . ' heures';
    }
    return $hours;
  }

  /**
   * returns choices for form display
   * @return array
   */
  public static function getagendaEndDisplayTimeFormChoice()
  {
    $hours = array();
    for($i=8; $i<24; $i++)
    {
      $hours[$i] = ($i-1) . ' heures';
    }
    return $hours;
  }

  /**
   * returns choices for form display
   * @return array
   */
  public static function getagendaNbDaysFormChoice()
  {
    return array(1 => 'jour courant', 3 => '3 prochains jours', 5 => 'semaine de 5 jours', 7 => 'semaine de 7 jours');
  }

  public function getChoicesTimeslotHeight()
  {
    return array(
      5 => '5 pixels',
      10 => '10 pixels',
      15 => '15 pixels',
      20 => '20 pixels',
      25 => '25 pixels',
      30 => '30 pixels',
      35 => '35 pixels',
      40 => '40 pixels',
      45 => '45 pixels',
    );
  }

  public function getChoicesTimeslotsPerHour()
  {
    return array(
        1 => '1 heure',
        2 => '30 minutes',
        3 => '20 minutes',
        4 => '15 minutes',
        6 => '10 minutes',
        12 => '5 minutes'
      );
  }

  public function configure()
  {
    unset($this['company_id']);

    //overriding the agendaStartDisplayTime widget
    $this->widgetSchema['agenda_start_display_time'] = new sfWidgetFormChoice(array('choices' => CompanyPreferencesForm::getagendaStartDisplayTimeFormChoice()));
    $this->validatorSchema['agenda_start_display_time'] = new sfValidatorChoice(array('choices' => array_keys(CompanyPreferencesForm::getagendaStartDisplayTimeFormChoice()), 'required' => true));

    //overriding the agendaEndDisplayTime widget
    $this->widgetSchema['agenda_end_display_time'] = new sfWidgetFormChoice(array('choices' => CompanyPreferencesForm::getagendaEndDisplayTimeFormChoice()));
    $this->validatorSchema['agenda_end_display_time'] = new sfValidatorChoice(array('choices' => array_keys(CompanyPreferencesForm::getagendaEndDisplayTimeFormChoice()), 'required' => true));

    //overriding the agendaNbDays widget
    $this->widgetSchema['agenda_nb_days'] = new sfWidgetFormChoice(array('choices' => CompanyPreferencesForm::getagendaNbDaysFormChoice()));
    $this->validatorSchema['agenda_nb_days'] = new sfValidatorChoice(array('choices' => array_keys(CompanyPreferencesForm::getagendaNbDaysFormChoice()), 'required' => true));

    //overriding the agendaTimeslotsPerHour widget
    $this->widgetSchema['agenda_timeslots_per_hour'] = new sfWidgetFormChoice(array('choices' => CompanyPreferencesForm::getChoicesTimeslotsPerHour()));
    $this->validatorSchema['agenda_timeslots_per_hour'] = new sfValidatorChoice(array('choices' => array_keys(CompanyPreferencesForm::getChoicesTimeslotsPerHour()), 'required' => true));

    //overriding the agendaTimeslotHeight widget
    $this->widgetSchema['agenda_timeslot_height'] = new sfWidgetFormChoice(array('choices' => CompanyPreferencesForm::getChoicesTimeslotHeight()));
    $this->validatorSchema['agenda_timeslot_height'] = new sfValidatorChoice(array('choices' => array_keys(CompanyPreferencesForm::getChoicesTimeslotHeight()), 'required' => true));

    //postvalidator
    $this->validatorSchema->setPostValidator(new sfValidatorAnd(array(
        new sfValidatorSchemaCompare('agenda_start_display_time', sfValidatorSchemaCompare::LESS_THAN, 'agenda_end_display_time'),
        new sfValidatorCallback(
                              array('callback' => array('CompanyPreferencesForm', 'agendaValidateHeight')), 
                              array('invalid' => 'Vous devez afficher des cases d\'au moins 30px en tout, merci de modifier la hauteur d\'une plage horaire ou le nombre de séparations.'))
      )));

    $this->widgetSchema->setLabels(array(
      'is_public'    => 'Afficher dans la liste ?',
      'need_ticket'  => 'Autoriser seulement les utilisateurs munis d\'un ticket ?',
      'website'      => 'Mon site internet',
      'agenda_start_display_time' => 'Heure de début d\'affichage',
      'agenda_end_display_time' => 'Heure de fin d\'affichage',
      'agenda_nb_days' => 'Nombre de jours à afficher',
      'agenda_timeslots_per_hour' => 'Nombre de séparation à afficher en une heure',
      'agenda_timeslot_height' => 'Hauteur de chaque plage horaire (en px)',
      'agenda_close_time_from_now' => 'Délais d\'ouverture de l\'agenda (en minutes)'
    ));

    $this->widgetSchema->setHelps(array(
      'is_public' => 'L\'entreprise doit elle apparaître dans la liste des entreprises sur le site utilisateur ?<br />Si cette option est désactivée, il est impossible d\'accéder à votre entreprise, même aux utilisateurs munis d\'un ticket.',
      'need_ticket' => 'En activant cette options, seuls les utilisateurs munis d\'un ticket (généré par vos soins) pourront accéder à votre agenda et par conséquent prendre rendez-vous.',
      'website' => 'Si votre contrat le permet, alors ce lien sera présenté sur votre page.',
      'agenda_close_time_from_now' => 'Délais minimal pour prendre rendez-vous à partir de l\'heure actuelle.<br />Par exemple, si il est 17h, et que cette valeur est de 15 minutes, personne ne peut prendre de rendez-vous avant 17h15.'
    ));
    chTools::setFormFormatter($this);
  }

  /**
   * validates the height of the cell
   * @return array();
   */
  public static function agendaValidateHeight($validator, $values, $arguments)
  {
    if ($values['agenda_timeslots_per_hour'] * $values['agenda_timeslot_height'] < 30)
    {
      throw new sfValidatorError($validator, 'invalid');
    }
    return $values;
  }
}

(function($) {
  $(function() {
    var BaseAccordionSlide = {
      options: {
          bodyHeight: 'auto'
        },
      _getHeader: function() {
        return this.element.prev().find('a');

      },
      _getBody: function() {
        return this.element;
      },
			_containerInit: function(){
				var self = this;
				$('#left-widgets')
					.bind('resize.accordion', function(){self._resizeContainer()});
				this._resizeContainer()
			},
			_resizeContainer: function(event){
				var _panelHeight = $('#left-widgets').find('.ui-accordion-content-active').height(),
						_$body = this._getBody(),
						_$eventList = $('.event-list',_$body);
				_$body.css('overflow', 'hidden');
				this._resize();
				_$body
					.children(':not(.event-list)')
					.each(function(){
							_panelHeight = _panelHeight - $(this).outerHeight(true);
						});
				_$eventList.height(_panelHeight);
				_$body.css('overflow', 'auto');
			}
    };
    var BaseHomeWidget = {
      options: {
          header: 'h2',
          body: 'div.widget-body',
          bodyHeight: 145
        },
      _getHeader: function() {
        return this.element.find(this.options.header);
      },
      _getBody: function() {
        return this.element.find(this.options.body);
      },
			_containerInit: function(){
				this._resizeContainer();
			},
			_resizeContainer: function(){
				$('.event-list',this._getBody()).height(this.options.bodyHeight);
				this._resize();
			}
    };
    $.widget('ui.chEventManager', {
      options: {
        baseUri: '',
        pagerHeight: 30,
        totalPages: 0,
        currPage: 0,
        noEventMessage: 'Liste vide'
      },
      gotoPage: function(page)
      {
        var options = this.options;
        if (
             (page != options.currPage || !options.currPage)
          && (page <= options.totalPages || !options.totalPages)
          && page > 0
        ) {
          this._loadPageData(page);
        }
      },
      refresh: function()
      {
        this._loadPageData(this.options.currPage);
      },
      _chEventManagerInit: function()
      {
        this._headerInit();
        this._bodyInit();
        this._pagerInit();
        this.gotoPage(1);
        var self = this;
				this._containerInit();
        $(window).bind('tresa.appointments.change', function() {self.refresh();});
      },
			_resize:function(){},
      _firstPage: function()
      {
        this.gotoPage(1);
      },
      _lastPage: function()
      {
        this.gotoPage(this.options.totalPages);
      },
      _nextPage: function()
      {
        this.gotoPage(parseInt(this.options.currPage, 10) + 1);
      },
      _previousPage: function()
      {
        this.gotoPage(parseInt(this.options.currPage, 10) - 1);
      },
      _updatePager: function(data)
      {
        this.options.currPage = data.page;
        this.options.totalPages = (data.totalPages ? data.totalPages : 1);
        var $pager = $(this.element).find('.event-pager');
        $pager.find('.pager-pages').html('page ' + this.options.currPage + '/' + this.options.totalPages);
        this._getHeader().find('.count').html('(' + data.count + ')');

        var $firstAndPrevious = $pager.find('.ui-icon-seek-first, .ui-icon-seek-prev').parent();
        var $lastAndNext = $pager.find('.ui-icon-seek-end, .ui-icon-seek-next').parent();
        if (this.options.currPage == this.options.totalPages)
        {
          //disable next and last
          $lastAndNext.addClass('ui-state-disabled');
        }
        else
        {
          //enable next and last
          $lastAndNext.removeClass('ui-state-disabled');
        }

        if (this.options.currPage == 1)
        {
          //disable first and previous
          $firstAndPrevious.addClass('ui-state-disabled');
        }
        else
        {
          //enable first and previous
          $firstAndPrevious.removeClass('ui-state-disabled');
        }
      },
      _headerInit: function() {
      var self = this;
        this._getHeader()
            .prepend(
                $('<span>')
                  .addClass('ui-icon ui-icon-refresh')
                  .click(function() {self.refresh();}));
      },
      _bodyInit: function()
      {
        $('<div />')
            .addClass('event-list')
            .appendTo(this._getBody());
      },
      //creates the pager
      _pagerInit: function()
      {
        var self = this;
        var $p = $('<div class="event-pager" />')
                    .css('height', this.options.pagerHeight)
                    .appendTo(this._getBody());
        var $last = $('<a />').append(
                        $('<span />')
                          .addClass('ui-icon')
                          .addClass('ui-icon-seek-end'))
                      .css('float', 'right')
                      .click(function() {self._lastPage()})
                      .addClass('ui-state-default ui-corner-all event-action-clickable')
                      .hover(
                              function() {$(this).addClass('ui-state-hover')},
                              function() {$(this).removeClass('ui-state-hover')}
                            )
                      .appendTo($p);
        var $next = $('<a />').append(
                        $('<span />')
                          .addClass('ui-icon')
                          .addClass('ui-icon-seek-next'))
                      .css('float', 'right')
                      .click(function() {self._nextPage()})
                      .addClass('ui-state-default ui-corner-all event-action-clickable')
                      .hover(
                              function() {$(this).addClass('ui-state-hover')},
                              function() {$(this).removeClass('ui-state-hover')}
                            )
                      .appendTo($p);
        var $first = $('<a />').append(
                        $('<span />')
                          .addClass('ui-icon')
                          .addClass('ui-icon-seek-first'))
                      .css('float', 'left')
                      .click(function() {self._firstPage()})
                      .addClass('ui-state-default ui-corner-all event-action-clickable')
                      .hover(
                              function() {$(this).addClass('ui-state-hover')},
                              function() {$(this).removeClass('ui-state-hover')}
                            )
                      .appendTo($p);
        var $prev = $('<a />').append(
                        $('<span />')
                          .addClass('ui-icon')
                          .addClass('ui-icon-seek-prev'))
                      .css('float', 'left')
                      .click(function() {self._previousPage()})
                      .addClass('ui-state-default ui-corner-all event-action-clickable')
                      .hover(
                              function() {$(this).addClass('ui-state-hover')},
                              function() {$(this).removeClass('ui-state-hover')}
                            )
                      .appendTo($p);
        var $pages = $('<p />')
                      .addClass('pager-pages')
                      .css('text-align', 'center')
                      .appendTo($p);
      },
      _loadPageData: function(page)
      {
        var self = this;
        this._getBody().find('.event-list')
                .html('')
                .append($(Tresa.i18n.get('loading')).addClass('loading'));

        $.ajax({
            url: $.ExposeRouting.generate(this.options.baseUri + '_list'),
            data: {page: parseInt(page, 10)},
            dataType: 'json',
            error: function(data) {Tresa.openErrorDialog('Impossible de récupérer les données distantes.')},
            success: function(data) {self._treatData(data);}
          });
      },
      _treatData: function(data)
      {
        var self = this,
            container = this._getBody().find('.event-list');
        container.html('');
        this._updatePager(data);
        if (data.events && data.events.length)
        {
          $.each(data.events, function() {self._insertEvent(this, container)});
        }
        else
        {
          $('<div class="no-event" />').html(this.options.noEventMessage).appendTo(container);
        }
      },
      _insertEvent: function(event, container)
      {
        $('<ul />')
          .addClass('event')
          .append(this._getActionsForEvent(event).addClass('event-action'))
          .append($('<li />').html(event.date + ' ' + event.start).addClass('event-summary'))
          .appendTo(container);
      },
      _showEventDetails: function(event)
      {
        var text = '';
        text += '<div class="event-details">';
        text += '<p class="event-date">le ' + event.date + ' à ' + event.start + ' (' + event.duration + ' minutes)</p>';
        text += '<p class="event-attendees-legend">Participants</p>';
        text += '<ul class="event-attendee-list">';
        $.each(event.contractors, function(index, a) {
              text += '<li class="event-attendee event-attendee-contractor">' + a.name + '</li>';
          });
        $.each(event.attendees, function(index, a) {
              text += '<li class="event-attendee event-attendee-attendee">' + a.name + '</li>';
          });
        text += '</ul>';
        text += '</div>';
        Tresa.openDialog(text, {title: event.summary});
      }
    });// end of ui.chEventManager
    $.widget('ui.BaseUpcomingEvents', $.ui.chEventManager, {
      options: {
        baseUri: '/widgets/upcoming-pro-events/'
      },
      _create: function()
      {
        this._chEventManagerInit();
      },
      _getActionsForEvent: function(event)
      {
        var self = this;
        var action1 = $('<li />')
                            .attr('title', 'voir le détail')
                            .click(function() {self._showEventDetails(event)})
                            .append(
                                $('<span />')
                                      .addClass('ui-icon')
                                      .addClass('ui-icon-help')
                                      .addClass('event-action-info'));
        action1.addClass('ui-state-default ui-corner-all event-action-clickable')
                  .hover(
                          function() {$(this).addClass('ui-state-hover')},
                          function() {$(this).removeClass('ui-state-hover')}
                        );
        var action2 = $('<li />').html('(' + event.summary + ')');
        return action1.add(action2);
      }
    });// end of ui.BaseUpcommingEvents
    $.widget('ui.BaseWaitForApproval', $.ui.chEventManager, {
      options: {
        baseUri: '/widgets/wait-pro-for-approval/'
      },
      _create: function()
      {
        this._chEventManagerInit();
      },
      _getActionsForEvent: function(event)
      {
        var self = this;
        var action1 = $('<li />')
                            .attr('title', 'accepter')
                            .click(function() {self._acceptEvent(event)})
                            .append(
                                $('<span />')
                                      .addClass('ui-icon')
                                      .addClass('ui-icon-check')
                                      .addClass('event-action-accept'));
        var action2 = $('<li />')
                            .attr('title', 'refuser')
                            .click(function() {self._askEventDecline(event)})
                            .append(
                                $('<span />')
                                      .addClass('ui-icon')
                                      .addClass('ui-icon-close')
                                      .addClass('event-action-decline'));
        var action3 = $('<li />')
                            .attr('title', 'voir le détail')
                            .click(function() {self._showEventDetails(event)})
                            .append(
                                $('<span />')
                                      .addClass('ui-icon')
                                      .addClass('ui-icon-help')
                                      .addClass('event-action-info'));
        return action3.add(action2).add(action1)
                  .addClass('ui-state-default ui-corner-all event-action-clickable')
                  .hover(
                          function() {$(this).addClass('ui-state-hover')},
                          function() {$(this).removeClass('ui-state-hover')}
                        );
      },
      _askEventDecline: function(event)
      {
        var self = this;
        Tresa.openConfirmDialog(
            'Vous êtes sur le point de décliner un rendez-vous.<br />',
            function() {
                $.ajax({
                    url: $.ExposeRouting.generate(self.options.baseUri + '_decline'),
                    data: {id: parseInt(event.id, 10)},
                    dataType: 'json',
                    error: function(data) {Tresa.openErrorDialog('Erreur inconnue.')},
                    success: function(data) {
                      if (data.success)
                      {
                        Tresa.openInfoDialog(data.message);
                        self.refresh();
                      }
                      else
                      {
                        Tresa.openErrorDialog(data.message || 'Erreur inconnue.');
                      }
                    }
                  });
            });
      },
      _acceptEvent: function(event)
      {
        var self = this;
        $.ajax({
            url: $.ExposeRouting.generate(this.options.baseUri + '_approve'),
            data: {id: parseInt(event.id, 10)},
            dataType: 'json',
            error: function(data) {Tresa.openErrorDialog('Erreur inconnue.')},
            success: function(data) {
              if (data.success)
              {
                Tresa.openInfoDialog(data.message);
                $(window).trigger('tresa.appointments.change');
              }
              else
              {
                Tresa.openErrorDialog(data.message || 'Erreur inconnue.');
              }
            }
          });
      }
    });// end of ui.BaseWaitForApproval

    $.widget('ui.BaseTodo', $.ui.chEventManager, {
			options: {
			},
      _create: function()
      {
				var self = this;
        this._appendAddForm();
        this._chEventManagerInit();
				$(window).bind("resize.leftmenu", function(){self._resize()});
      },
      _appendAddForm: function() {
        var self = this;
				$(this._getBody())
					.prepend(
						$('<div />')
							.css('display', 'block')
							.append(
								$('<input type="text" name="summary" />')
									.addClass('event-todo-summary')
									.attr('id', 'event-todo-summary'))
							.append(
								$('<a />')
									.attr('id', 'event-todo-add')
									.html(Tresa.i18n.get('Add_task'))
									.button({icons: {primary: 'ui-icon-plusthick'}, text: false})
									.removeClass('ui-corner-all')
									.addClass('event-action-clickable')
									.click(function() {self.addTodo();return false;}))
									); //end of prepend
      },
			_resize: function() {
				var _$input  = $(this.element).find('input#event-todo-summary'),
						_$container = _$input.parent();

				_$input
						.width(_$container.width() - _$container.find('a#event-todo-add').outerWidth() - 3 );

			},
      _insertEvent: function(event, container) {
				var self = this;
        $('<ul />')
          .addClass('event')
//          .append(this._getActionsForEvent(event).addClass('event-action'))
          .append($('<li />')
										.html(event.summary)
										.prepend('<input type="checkbox" />')
										.find('input')
											.data('todo', event)
											.click(function() {self._completeTodo(this)})
										.end()
										.addClass('event-summary'))
          .appendTo(container);
      },
			_completeTodo: function(checkbox) {
				$.ajax({
            url: $.ExposeRouting.generate(this.options.baseUri + '_remove', {'id' : $(checkbox).data('todo').id }),
            dataType: 'json',
            error: function(data) {Tresa.openErrorDialog('Erreur inconnue.')},
            success: function(data) {
              if (data.success) {
								$(checkbox).parent().parent().remove();
							}
							else {
                Tresa.openErrorDialog(data.message || 'Erreur inconnue.');
							}
						}
					});
			},
      addTodo: function(todo) {
				var self = this;
        $.ajax({
            url: $.ExposeRouting.generate(this.options.baseUri + '_add'),
            data: this.getTodoValues(),
            dataType: 'json',
            error: function(data) {Tresa.openErrorDialog('Erreur inconnue.')},
            success: function(data) {
              if (data.success)
              {
                $(window).trigger('tresa.appointments.change');
								self.element.find('input#event-todo-summary').val('');
              }
              else
              {
                Tresa.openErrorDialog(data.message || 'Erreur inconnue.');
              }
            }
          });
      },
			getTodoValues: function() {
				return {
					summary: this.element.find('input#event-todo-summary').val()};
			}
    });//end of ui.BaseTodo

    var BaseOptionsUpcomingEvents = { options: {baseUri: 'widget_upcoming_events_list'} };
    var BaseOptionsWaitApproval = { options: {baseUri: 'widget_wait_for_approval_list'} };
    var BaseOptionsTodo = { options: {baseUri: 'widget_todo_list'} };
    var BaseOptionsUpcomingProEvents = { options: {baseUri: 'widget_upcoming_pro_events_list'} };
    var BaseOptionsWaitProApproval = { options: {baseUri: 'widget_wait_pro_for_approval_list'} };
    var BaseOptionsProTodo = { options: {baseUri: 'widget_pro_todo_list'} };

    $.widget('ui.upcomingeventswidget', $.ui.BaseUpcomingEvents, $.extend(true, {},BaseOptionsUpcomingEvents, BaseHomeWidget));
    $.widget('ui.waitforapprovalwidget', $.ui.BaseWaitForApproval, $.extend(true, {}, BaseOptionsWaitApproval, BaseHomeWidget));
    $.widget('ui.todowidget', $.ui.BaseTodo, $.extend(true, {}, BaseOptionsTodo, BaseHomeWidget, {options: {bodyHeight: 120}}));

    $.widget('ui.upcomingeventsslide', $.ui.BaseUpcomingEvents, $.extend(true, {},BaseOptionsUpcomingEvents, BaseAccordionSlide));
    $.widget('ui.waitforapprovalslide', $.ui.BaseWaitForApproval, $.extend(true, {}, BaseOptionsWaitApproval, BaseAccordionSlide));
    $.widget('ui.todoslide', $.ui.BaseTodo, $.extend(true, {}, BaseOptionsTodo, BaseAccordionSlide));

    $.widget('ui.upcomingeventsprowidget', $.ui.BaseUpcomingEvents, $.extend(true, {},BaseOptionsUpcomingProEvents, BaseHomeWidget));
    $.widget('ui.waitforapprovalprowidget', $.ui.BaseWaitForApproval, $.extend(true, {}, BaseOptionsWaitProApproval, BaseHomeWidget));
    $.widget('ui.todoprowidget', $.ui.BaseTodo, $.extend(true, {}, BaseOptionsProTodo, BaseHomeWidget, {options: {bodyHeight: 120}}));

    $.widget('ui.upcomingeventsproslide', $.ui.BaseUpcomingEvents, $.extend(true, {},BaseOptionsUpcomingProEvents, BaseAccordionSlide));
    $.widget('ui.waitforapprovalproslide', $.ui.BaseWaitForApproval, $.extend(true, {}, BaseOptionsWaitProApproval, BaseAccordionSlide));
    $.widget('ui.todoproslide', $.ui.BaseTodo, $.extend(true, {}, BaseOptionsProTodo, BaseAccordionSlide));

    //now init the widgets
    $('#widget-upcoming-events').upcomingeventswidget();
    $('#widget-wait-for-approval').waitforapprovalwidget();
    $('#widget-todo').todowidget();

    $('#widget-upcoming-pro-events').upcomingeventsprowidget();
    $('#widget-wait-pro-for-approval').waitforapprovalprowidget();
    $('#widget-pro-todo').todoprowidget();

    //and init the accodions slides
    $('#slide-upcoming-events').upcomingeventsslide();
    $('#slide-wait-for-approval').waitforapprovalslide();
    $('#slide-todo').todoslide();

    $('#slide-upcoming-pro-events').upcomingeventsproslide();
    $('#slide-wait-pro-for-approval').waitforapprovalproslide();
    $('#slide-pro-todo').todoproslide();

  });//end of domready
})(jQuery);

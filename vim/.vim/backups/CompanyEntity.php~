<?php
/**
 * @package    T-resa-lib
 * @subpackage  default
 * @author     Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright  (c) Carpe Hora SARL 2011
 */



/**
 * Skeleton subclass for representing a row from the 'tab_company_entity' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.5.2 on:
 *
 * Thu Jul 29 15:49:59 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    T-resa-lib
 */
class CompanyEntity extends BaseCompanyEntity
{
  const  RIGHT_NONE   = 0,
         RIGHT_VIEW   = 0x1,
         RIGHT_UPDATE = 0x2,
         RIGHT_CREATE = 0x4,
         RIGHT_DELETE = 0x8,
         RIGHT_FULL   = 0xF;

  public function setCompanyName($name)
  {
    parent::setCompanyName($name);
    $this->updateSearchIndex();
    return $this;
  }

  public function updateSearchIndex()
  {
    $this->setSearchIndex(
            strtoupper(
                iconv('UTF-8', 'US-ASCII//TRANSLIT', $this->getCompanyName())));
    return $this;
  }

  /**
   * Returns the (supposed to be unique) calendar owned by the current
   * company entity.
   *
   * @TODO REMOVE !
   *
   * @return Calendar
   * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
   */
  public function getCalendar()
  {
    return CalendarQuery::create()
      ->filterByOwner($this)
      ->findOne();
  }

  /**
   * Returns the real visibility of the current company entity's
   * directory.
   *
   * @return int The visibility
   * @author Kevin Gomez <kevin_gomez@carpe-hora.com>
   */
  public function getRealDirectoryVisibility()
  {
    // entity level visibility
    if ($this->getContactsDefaultVisibility() != ContactQuery::PARENT_VISIBILITY)
    {
      return $this->getContactsDefaultVisibility();
    }

    // company level
    return $this->getCompany()->getContactsDefaultVisibility();
  }

  /**
   * returns the real calendars default visibility for current company entity.
   *
   * @return Integer the visibility
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getRealCalendarsDefaultVisibility()
  {
    // entity level visibility
    if ($this->getCalendarsDefaultVisibility() != CalendarQuery::PARENT_VISIBILITY)
    {
      return $this->getCalendarsDefaultVisibility();
    }

    // company level
    return $this->getCompany()->getCalendarsDefaultVisibility();
  }

  /**
   * returns the real calendars default visibility for current company entity.
   *
   * @return Integer the visibility
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getRealCalendarsDefaultPublication()
  {
    // entity level visibility
    if ($this->getCalendarsDefaultPublication() != CalendarQuery::PARENT_PUBLICATION)
    {
      return $this->getCalendarsDefaultPublication();
    }

    // company level
    return $this->getCompany()->getCalendarsDefaultPublication();
  }

  /**
   * an overlayer to generated getCompanyRights.
   * if no company right is found, then a new one is created.
   *
   * @param PropelPDO $con the PDO connection to use if given
   *
   * @return ComapnyEntityConfig
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   * @throws     PropelException
   * @see BaseCompanyEntity::getCompanyRights
   */
  public function getCompanyRights(PropelPDO $con = null)
  {
    throw new LogicException('CompanyRights is no more used');
    $rights = parent::getCompanyRights($con);
    if (!$rights)
    {
      $rights = new CompanyEntityConfig();
      $rights->setEntity($this);
    }
    return $rights;
  }

  public function getPropertyObjectForField($field)
  {
    $properties = $this->getPropertiesObjectsByName($field->getId());
    if (count($properties))
    {
      $property = array_shift($properties);
    }
    else
    {
      $property = new CompanyEntityProperty();
      $property->setPropertyName($field->getId());
      $this->addCompanyEntityProperty($property);
    }
    $property->setFieldId($field->getId());
    return $property;
  }

  public function getPropertyForField($field)
  {
    return $this->getPropertyObjectForField($field)->getPropertyValue();
  }

  public function getAssistants()
  {
    return ContractorQuery::create()
              ->filterByCompanyId($this->getCompanyId())
              ->leftJoinWith('AssistantLink assistants')
              ->leftJoinWith('AssistedLink assisteds')
              ->where('assisteds.AssistantOfId = ?', $this->getId())
              ->find();
  }

  public function getAssisteds()
  {
    return ContractorQuery::create()
              ->filterByCompanyId($this->getCompanyId())
              ->leftJoinWith('AssistantLink assistants')
              ->leftJoinWith('AssistedLink assisteds')
              ->where('assisteds.AssistedById = ?', $this->getId())
              ->find();
  }

  protected $collegues;

  public function getCollegues()
  {
    if (is_null($this->collegues))
    {
      $this->collegues = CompanyEntityQuery::create()
              ->filterByCompanyId($this->getCompanyId())
              ->leftJoinWith('AssistantLink assistants')
              ->leftJoinWith('AssistedLink assisteds')
              ->where('CompanyEntity.Id <> ?', $this->getId())
              ->find();
    }

    return $this->collegues;
  }

  public function getCollegue($companyEntity)
  {
    $id = is_numeric($companyEntity) ? $companyEntity : $companyEntity->getId();
    foreach ($this->getCollegues() as $collegue)
    {
      if ($collegue->getId() == $id)
      {
        return $collegue;
      }
    }
    throw new sfException(sprintf('Unknown collegue %d for contractor %d', $id, $this->getId()));
  }

  /**
   * retrives the current entity rights for the given entity.
   *
   * @aparam {integer|CompanyEntity} $companyEntity the company entity to look for
   *
   * @return {AssistantLink|CompanyEntity}
   */
  public function getAssistanceRightsFor($companyEntity)
  {
    $company_entity_id = is_numeric($companyEntity) ? $companyEntity : $companyEntity->getId();
    if ($company_entity_id == $this->getId())
    {
      $link = new AssistantLink();
      $link->setAccessCalendarCompany( Calendar::RIGHT_FULL );
      $link->setAccessCalendarProtected( Calendar::RIGHT_FULL );
      $link->setAccessContactCompany( Contact::RIGHT_FULL );
      $link->setAccessContactProtected( Contact::RIGHT_FULL );
      return $link;
    }
    $collegue = $this->getCollegue($companyEntity);
    foreach ($collegue->getAssistantLinks() as $link)
    {
      // isDeleted ans isNew are here to avoid strange behaviors in
      // assistant ajax management
      if ($link->getAssistedById() == $this->getId() && !$link->isDeleted() && !$link->isNew())
      {
        return $link;
      }
    }
    return $collegue;
  }

  /**
   * retrives the current entity assistantLink for the given entity, or creates one if none exists
   *
   * @aparam {integer|CompanyEntity} $companyEntity the company entity to look for
   *
   * @return {AssistantLink|CompanyEntity}
   */
  public function getAssistanceLinkFor($companyEntity)
  {
    $collegue = $this->getCollegue($companyEntity);
    if ($this->hasAssistanceLinkFor($companyEntity))
    {
      return $this->getAssistanceRightsFor($companyEntity);
    }

    $rights = $this->getAssistanceRightsFor($companyEntity);

    $assistanceLink = new AssistantLink();
    $assistanceLink->setAccessCalendarCompany($rights->getAccessCalendarCompany());
    $assistanceLink->setAccessCalendarProtected($rights->getAccessCalendarProtected());
    $assistanceLink->setAccessContactCompany($rights->getAccessContactCompany());
    $assistanceLink->setAccessContactProtected($rights->getAccessContactProtected());

    $collegue->addAssistantLink($assistanceLink);
    $this->addAssistedLink($assistanceLink);

    return $assistanceLink;
  }

  public function hasAssistanceLinkFor($companyEntity)
  {
    $collegue = $this->getCollegue($companyEntity);
    foreach ($collegue->getAssistantLinks() as $link)
    {
      // isDeleted ans isNew are here to avoid strange behaviors in
      // assistant ajax management
      if ($link->getAssistedById() == $this->getId() && !$link->isDeleted() && !$link->isNew())
      {
        return true;
      }
    }
    return false;
  }

  public function canViewCalendarCompanyFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarCompany()  & Calendar::RIGHT_VIEW);
  }

  public function canUpdateCalendarCompanyFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarCompany()  & Calendar::RIGHT_UPDATE);
  }

  public function canCreateCalendarCompanyFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarCompany()  & Calendar::RIGHT_CREATE);
  }

  public function canDeleteCalendarCompanyFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarCompany()  & Calendar::RIGHT_DELETE);
  }

  public function canViewCalendarProtectedFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarProtected()  & Calendar::RIGHT_VIEW);
  }

  public function canUpdateCalendarProtectedFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarProtected()  & Calendar::RIGHT_UPDATE);
  }

  public function canCreateCalendarProtectedFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarProtected()  & Calendar::RIGHT_CREATE);
  }

  public function canDeleteCalendarProtectedFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessCalendarProtected()  & Calendar::RIGHT_DELETE);
  }

  public function canViewCompanyContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactCompany() & Contact::RIGHT_VIEW);
  }

  public function canUpdateCompanyContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactCompany() & Contact::RIGHT_UPDATE);
  }

  public function canCreateCompanyContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactCompany() & Contact::RIGHT_CREATE);
  }

  public function canDeleteCompanyContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactCompany() & Contact::RIGHT_DELETE);
  }

  public function canViewProtectedContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactProtected() & Contact::RIGHT_VIEW);
  }

  public function canUpdateProtectedContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactProtected() & Contact::RIGHT_UPDATE);
  }

  public function canCreateProtectedContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactProtected() & Contact::RIGHT_CREATE);
  }

  public function canDeleteProtectedContactFor($companyEntity)
  {
    return (bool) ($this->getAssistanceRightsFor($companyEntity)->getAccessContactProtected() & Contact::RIGHT_DELETE);
  }

  public function enableViewCalendarCompanyByDefault()
  {
    return (bool) ($this->getAccessCalendarCompany()  & Calendar::RIGHT_VIEW);
  }

  public function enableUpdateCalendarCompanyByDefault()
  {
    return (bool) ($this->getAccessCalendarCompany()  & Calendar::RIGHT_UPDATE);
  }

  public function enableCreateCalendarCompanyByDefault()
  {
    return (bool) ($this->getAccessCalendarCompany()  & Calendar::RIGHT_CREATE);
  }

  public function enableDeleteCalendarCompanyByDefault()
  {
    return (bool) ($this->getAccessCalendarCompany()  & Calendar::RIGHT_DELETE);
  }

  public function enableViewCalendarProtectedByDefault()
  {
    return (bool) ($this->getAccessCalendarProtected()  & Calendar::RIGHT_VIEW);
  }

  public function enableUpdateCalendarProtectedByDefault()
  {
    return (bool) ($this->getAccessCalendarProtected()  & Calendar::RIGHT_UPDATE);
  }

  public function enableCreateCalendarProtectedByDefault()
  {
    return (bool) ($this->getAccessCalendarProtected()  & Calendar::RIGHT_CREATE);
  }

  public function enableDeleteCalendarProtectedByDefault()
  {
    return (bool) ($this->getAccessCalendarProtected()  & Calendar::RIGHT_DELETE);
  }

  public function enableViewPublicContactByDefault()
  {
    return (bool) ($this->getAccessContactCompany() & Contact::RIGHT_VIEW);
  }

  public function enableUpdatePublicContactByDefault()
  {
    return (bool) ($this->getAccessContactCompany() & Contact::RIGHT_UPDATE);
  }

  public function enableCreatePublicContactByDefault()
  {
    return (bool) ($this->getAccessContactCompany() & Contact::RIGHT_CREATE);
  }

  public function enableDeletePublicContactByDefault()
  {
    return (bool) ($this->getAccessContactCompany() & Contact::RIGHT_DELETE);
  }

  public function enableViewProtectedContactByDefault()
  {
    return (bool) ($this->getAccessContactProtected() & Contact::RIGHT_VIEW);
  }

  public function enableUpdateProtectedContactByDefault()
  {
    return (bool) ($this->getAccessContactProtected() & Contact::RIGHT_UPDATE);
  }

  public function enableCreateProtectedContactByDefault()
  {
    return (bool) ($this->getAccessContactProtected() & Contact::RIGHT_CREATE);
  }

  public function enableDeleteProtectedContactByDefault()
  {
    return (bool) ($this->getAccessContactProtected() & Contact::RIGHT_DELETE);
  }

  public function __toString()
  {
    return $this->getCompanyName();
  }

  protected $colleguesICanSeeEventsOf;

  public function getColleguesICanSeeEventsOf()
  {
    if (!$colleguesICanSeeEventsOf)
    {
      $colleguesICanSeeEventsOf = array();
      foreach ($this->getCollegues() as $c)
      {
        if ($this->canViewEventFor($c))
        {
          $colleguesICanSeeEventsOf[] = $c;
        }
      }
    }

    return $colleguesICanSeeEventsOf;
  }

  /**
  * @scope public
  * @description is the company entity a ressource
  */
  public function isRessource ()
  {
    return false;
  }

  /**
  * @scope public
  * @description is the current CompanyEntity a contractor
  */
  public function isContractor ()
  {
    return false;
  }

  /**
   * TODO: cache the credentials
   * return an array of available credentials
   *
   * @return array<string>
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getCredentials()
  {
    $credentials = $this->getCredentialObjects();
    $c = array();
    foreach ($credentials as $credential)
    {
      $c[] = $credential->getCredential();
    }

    return $c;
  }

  /**
   * create a credential
   *
   * @param string $credential Credential name
   * @return CompanyEntity
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function addCredential($credential)
  {
    if (!$this->hasCredential($credential, /* check company entity only */ false))
    {
      $c = new CompanyEntityCredential();
      $c->setCredential($credential);
      $this->addCredentialObject($c);
    }
    return $this;
  }

  /**
   * delete all credential objects with given name
   *
   * @return CompanyEntity
   **/
  function removeCredential($credential)
  {
    $this->getCredentialObjects(CompanyEntityCredentialQuery::create()->filterByCredential($credential))->delete();
    $this->clearCredentialObjects();
    return $this;
  }


  /**
   * determines wether or not the entity has given credential
   * You can check several credentials with following format:
   * array('credential1', 'cerdential2') to check *credential1* OR *cerdential2*
   *
   * @param string|array $credential Credential name
   * @param boolean $checkdefault Check CompanyDefaultCredential, default=true
   * @return boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function hasCredential($credentials, $checkdefault = true)
  {
    return in_array($credentials,$this->getCredentials())
              || ($checkdefault && $this->getCompany()->hasDefaultCredential($credentials));
  }

  /**
   * retrive wether or not the entity is admin.
   * if argument given, force the admin credential to given value
   *
   * @param boolean $value if provided, set or reset admin
   * @return boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function isAdmin($value = null)
  {
    if (is_null($value))
    {
      return $this->hasCredential('company_admin');
    }
    if ($value)
    {
      $this->addCredential('company_admin');
    }
    else
    {
      $this->removeCredential('company_admin');
    }

    return $this->hasCredential('company_admin');
  }

  /**
   * add default
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function preInsert(PropelPDO $con = null)
  {
    if (is_null($this->getAccessCalendarCompany()))
    {
      $this->setAccessCalendarCompany(Calendar::RIGHT_FULL);
    }

    if (is_null($this->getAccessCalendarProtected()))
    {
      $this->setAccessCalendarProtected(Calendar::RIGHT_NONE);
    }

    if (is_null($this->getAccessContactCompany()))
    {
      $this->setAccessContactCompany(Contact::RIGHT_FULL);
    }

    if (is_null($this->getAccessContactProtected()))
    {
      $this->setAccessContactProtected(Contact::RIGHT_NONE);
    }
    return true;
  }
} // CompanyEntity

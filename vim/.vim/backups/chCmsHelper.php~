<?php
use_helper('chCmsForm');
use_helper('chCmsLayout');
/**
* This file declare the chCms helpers
*
* @package chCmsBasePlugin
* @subpackage Helper
* @author Julien MUETTON <julien_muetton@carpe-hora.com>
* @copyright Copyright (c) 2010, Carpe Hora SARL
* @since 2010-12-02
*/

function get_site_preference($preferenceName, $default = '')
{
  return chTools::get($preferenceName, $default);
}

function include_site_preference($preferenceName, $default = '')
{
  echo get_site_preference($preferenceName, $default);
}

function include_widget_before($id = null)
{
  echo strtr(get_site_preference('widget_before', '<div>'), array('%id%' => $id));
}

function cms_link_to($title, $page, $uri = '')
{
  if (!is_array($uri))
  {
    $uri = explode('&', $uri);
  }
  array_unshift($uri, '@page_show?page_id='.$page->getId());
  return link_to($title, join('&', $uri));
}

function cms_use_stylesheet($stylesheet, $plugin = null)
{
  $sf_user = sfContext::getInstance()->getUser();
  $prefix = strlen($plugin) ? sprintf('/%s/css/', $plugin) : '/css/';
  use_stylesheet(sprintf('%s%s', $prefix, $stylesheet), sfWebResponse::MIDDLE);
  return use_stylesheet(sprintf('%sthemes/%s/%s', $prefix, $sf_user->getTheme(), $stylesheet), sfWebResponse::MIDDLE);
}

function cms_get_messages()
{
  $user = isset($sf_user) ? $sf_user : sfContext::getInstance()->getUser();
  $message = '';
  if ($user->hasInfo())
  {
    foreach ($user->getInfos() as $info)
    {
      $message.= jui_get_info_box($info);
    }
  }
  if ($user->hasError())
  {
    foreach ($user->getErrors() as $error)
    {
      $message.= jui_get_error_box($error);
    }
  }
  $user->resetMessages();
  return sprintf('<div id="messages">
      <div id="notify-container" style="z-index:3;">
        <div id="notify-info-message" class="ui-notify-click ui-state-info ui-corner-all dialog-info">
          <div class="ui-dialog-content">
            <h1>#{title}</h1>
            <p>#{text}</p>
          </div>
        </div>
        <div id="notify-error-message" class="ui-notify-click ui-state-error ui-corner-all dialog-error">
          <div class="ui-dialog-content">
            <a class="ui-notify-cross ui-notify-close" href="#">x</a>
            <h1>#{title}</h1>
            <p>#{text}</p>
          </div>
        </div>
      </div>%s</div>', strlen($message) ? $message : "" );

}

function cms_include_messages()
{
  echo cms_get_messages();
}

function cms_include_stylesheets()
{
  $version = sprintf('v=%s', chTools::get('deployed_timestamp'));
  $response = sfContext::getInstance()->getResponse();

  echo '<!-- include_stylesheets -->';
  echo chCmsAssetsTools::getStylesheets(chCmsAssetsTools::collectAssets($response));

  sfConfig::set('symfony.asset.stylesheets_included', true);
}

function cms_include_javascripts()
{
  $version = sprintf('v=%s', chTools::get('deployed_timestamp'));
  $response = sfContext::getInstance()->getResponse();

  echo '<!-- cms_include_javascripts -->';
  echo chCmsAssetsTools::getJavascripts(chCmsAssetsTools::collectAssets($response));

  sfConfig::set('symfony.asset.javascripts_included', true);
}

/**
 * Automatically adds a class name to the link if the link route matches
 * the current module or route.
 *
 * <b>Style Options:</b>
 * - 'class' - the class name to append to the link, defaults to 'current'
 * - 'module_only' - append class name if the current module and link module match
 * - 'tag' - an html to encapsulate the link, which will receive the class name rather than the <a> tag
 *
 * <b>Examples:</b>
 * <code>
 *   echo link_to_styled('Events', 'event/list', 'class=active', 'id=event_link', );
 *   if the current route is 'event/list', then:
 *     => <a href="path/to/event/list/action" id="event_link" class="active">Events</a>
 *
 *   echo link_to_styled('Events', 'event/list', 'class=active module_only=true tag=li', 'id=event_link');
 *   if the current module matches the module present in the route, then:
 *     => <li class="active"><a href="path/to/event/list/action" id="event_link">Events</a></li>
 * </code>
 *
 * @param  string name of the link, i.e. string to appear between the <a> tags
 * @param  string 'module/action' or '@rule' of the action
 * @param  array additional style options
 * @param  array additional HTML compliant <a> tag parameters
 * @return string XHTML compliant <a href> tag
 * @see    link_to
 */
function link_to_styled($text, $route = '', $style_options = '', $options = '') {

  $options = _parse_attributes($options);
  $style_options = _parse_attributes($style_options);

  if (!isset($style_options['class']))
  {
    $style_options['class'] = 'current';
  }

  if (isset($style_options['module_only']))
  {
    if (!isset($context))
    {
      $context = sfContext::getInstance();
    }

    if (!isset($current_module_name))
    {
      $current_module_name = $context->getModuleName();
    }

    list($current_route_name, $params) = $context->getController()->convertUrlStringToParameters($route);
    $is_current = $params['module'] == $current_module_name;
  }
  else
  {
    if (!isset($context))
    {
      $context = sfContext::getInstance();
    }

    $current_route = $context->getRouting()->getCurrentInternalUri(false);
    $is_current = $context->getController()->genUrl($current_route) == $context->getController()->genUrl($route);
  }

  if (isset($style_options['tag']) && isset($style_options['innertag']))
  {
    $tag_options = (true === $is_current) ? array('class'=>$style_options['class']) : array();
    $return_string = content_tag($style_options['tag'], link_to(content_tag($style_options['innertag'], $text), $route, $options), $tag_options);
  }
  else if (isset($style_options['tag']))
  {
    $tag_options = (true === $is_current) ? array('class'=>$style_options['class']) : array();
    $return_string = content_tag($style_options['tag'], link_to($text, $route, $options), $tag_options);
  }
  else if (isset($style_options['innertag']))
  {
    if (true === $is_current)
    {
      $options['class'] = isset($options['class']) ? $options['class'] . ' ' . $style_options['class'] : $style_options['class'];
    }
    $return_string = link_to(content_tag($style_options['innertag'], $text), $route, $options);
  }
  else
  {
    if (true === $is_current)
    {
      $options['class'] = isset($options['class']) ? $options['class'] . ' ' . $style_options['class'] : $style_options['class'];
    }
    $return_string = link_to($text, $route, $options);
  }
  return $return_string;
}

/*------------------------     TOOLS     -------------------------*/

function _add_class_attribute($class, &$attributes)
{
  $attributes = _parse_attributes($attributes);

  // add the class
  if (array_key_exists('class', $attributes) && strlen($attributes['class']))
  {
    $classes = explode(' ', $attributes['class']);
  }
  else
  {
    $classes = array();
  }

  $attributes['class'] = join(' ', array_unique(array_merge($classes, explode(' ', $class))));

  return $attributes;
}

/**
 * fills a default value to an attribute if none exists
 *
 * <code>
 *  _set_default_attribute('icon', 'my-icon', $attributes)
 * </code>
 *
 * @param string $attributeName the attribute name to set default value
 * @param string $attributeValue the attribute default value
 * @param array|string &$attributes the attributes to parse
 */
function _set_default_attribute($attributeName, $attributeValue, &$attributes)
{
  $attributes = _parse_attributes($attributes);

  if ( !array_key_exists($attributeName, $attributes) || !strlen($attributes[$attributeName]) )
  {
    $attributes[$attributeName] = $attributeValue;
  }

  return $attributes;
}


function get_boolean_value($value)
{
  return jui_icon($value  ? 'silk-tick' : 'silk-cross');
}

function include_boolean_value($value)
{
  echo get_boolean_value($value);
}

<?php

require_once sfConfig::get('sf_plugins_dir').'/sfGuardPlugin/modules/sfGuardAuth/lib/BasesfGuardAuthActions.class.php';

/**
 * Base actions for the chCmsGuardExtraPlugin chCmsFrontendAccount module.
 *
 * @package     chCmsGuardExtraPlugin
 * @subpackage  module-chCmsFrontendAccount
 * @author      MoUeTtE <julien_muetton@carpe-hora.com>
 * @version     SVN: $Id: BaseActions.class.php 12628 2008-11-04 14:43:36Z Kris.Wallsmith $
 */
abstract class BasechCmsFrontendAccountActions extends BasesfGuardAuthActions
{
  public function executeIndex(sfWebRequest $request)
  {

  }

  /**
   * if user is signed in, then redirect to:
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected function redirectAfterSignin($request)
  {
    $user = $this->getuser();
    if ($user->isAuthenticated())
    {
      // redirect
      $signinUrl = $user->getSigninSuccessRedirectUrl($request, $this->getContext());
      $this->redirect($signinUrl);
    }
  }

  /**
   * validate the signin action
   * - check if authenticated
   * - redirect to signin module if not this one
   * - set referer if needed
   *
   * @return void
   **/
  protected function preSignin($request)
  {
    $this->redirectAfterSignin($request);

    // if this is not the login module / action
    $module = sfConfig::get('sf_login_module');
    if ($this->getModuleName() != $module)
    {
      return $this->redirect($module.'/'.sfConfig::get('sf_login_action'));
    }

    $this->getUser()->prepareAccountAction($this->getContext());
  }

  /**
   * entry point for Signin action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeSignin($request)
  {
    $this->preSignin($request);
    $sf_user = $this->getUser();

    if ($request->isXmlHttpRequest())
    {
      $this->getResponse()->setHeaderOnly(true);
      $this->getResponse()->setStatusCode(401);
      return sfView::NONE;
    }

    // we are on the login page
    $sf_user->setAttribute('chCmsGuardExtraPlugin.provider.login', 'login');

    $formClass = chTools::get('sf_guard_plugin_signin_form', 'chCmsFormSignin');
    $this->form = new $formClass();
    $this->extra_signin_params = $sf_user->parseSigninExtraParameters($request);

    $this->getResponse()->setStatusCode(401);
  }

  /**
   * entry point for DoSignin action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeDoSignin(sfWebRequest $request)
  {
    $user = $this->getUser();
    $formClass = chTools::get('sf_guard_plugin_signin_form', 'chCmsFormSignin');
    $form = new $formClass();

    $form->bind($request->getParameter($form->getName()));
    if ($form->isValid())
    {
      $values = $form->getValues();
      $remember = array_key_exists('remember', $values) ? $values['remember'] : false;

      $user->extraSignIn($this->getContext(), $values['user'], $remember, /* con */ null);

      $this->redirectAfterSignin($request);
    }

    $this->getResponse()->setStatusCode(401);

    $this->extra_signin_params = $user->parseSigninExtraParameters($request);
    $this->form = $form;
    $this->setTemplate('signin');
  }

  /**
   * signin user from verified provider authentication
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeDoSigninProvider(sfWebRequest $request)
  {
    $sf_user = $this->getUser();
    $this->forward404Unless($sf_user->haschCmsGuardExtraProvider(), 'no provider found');

    $authentication = $sf_user->getchCmsGuardExtraProvider();
    $guardUser = $authentication->getUser();

    $this->forward404Unless($guardUser, 'no matching user... logic exception ?');

    $sf_user->extraSignIn($this->getContext(), $guardUser, false, null);

    $this->redirectAfterSignin($request);
  }


  /**
   * entry point for AssociateProvider action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeAssociateProvider(sfWebRequest $request)
  {
    $sf_user = $this->getUser();

    $this->forward404Unless($this->getUser()->haschCmsGuardExtraProvider());

    $auth = $sf_user->getchCmsGuardExtraProvider();

    if(!$auth->isNew() && $auth->getUserId() !== $sf_user->getId())
    {
      $sf_user->AddError(sprintf('Ce compte externe (%s) ne peut être associé qu\'à un seul compte t-resa', $auth->getAccountIdentifier()));
    }
    else if(!$auth->isNew() && $auth->getUserId() === $sf_user->getId())
    {
      $sf_user->AddError(sprintf('Ce compte externe (%s) est déjà associé à votre compte t-resa', $auth->getAccountIdentifier()));
    }
    else
    {
      // link the auth object with the user
      $sf_user->addProvider($auth);
      $sf_user->AddInfo(sprintf('Votre compte a été associé avec le compte externe %s', $auth->getAccountIdentifier()));

      //NOTIFY
      $this->getUser()->sendAddedProviderMessage($sf_user->getGuardUser(), $auth->getAccountIdentifier());
    }

    // cancel the auth
    $sf_user->cancelchCmsGuardExtraProviderAuth();

    $this->redirect('chCmsFrontendAccount/myProfile#providers');
  }

  public function executeShowUser(sfWebRequest $request)
  {

  }

  public function executeMyPassword(sfWebRequest $request)
  {
    // we retrieve the providers list for the current user.
    $this->providers = AuthenticationPeer::getProvidersForUser($this->getUser());

    // can the user delete a provider ?
    $this->can_delete_provider = !(count($this->providers) == 1 AND $this->getUser()->hasDummyPassword());

    // we display the various forms (change password, t-resa key, etc.)
    $this->form = new PluginchCmsUserSecurityForm();

    if (!$request->isMethod('post'))
    {
      return sfView::SUCCESS;
    }
    $this->form->bind($request->getParameter($this->form->getName()));
    if ($this->form->isValid())
    {
      if ($this->getUser()->hasDummyPassword())
      {
        //NOTIFY
        $this->getUser()->sendModifiedPasswordMessage($this->getUser()->getGuardUser(), $form->getValue('password'));
      }
      $this->form->save();
      $this->getUser()->addInfo('Your password has been updated, you will recieve a confirmation email.');


      $this->redirect($this->getModuleName().'/index');
    }
    $this->getUser()->addError('The values you submitted contains errors.');
  }

  public function executeMyProfile(sfWebRequest $request)
  {
    $this->form = new chCmsUserProfileForm();
    if (!$request->isMethod('post'))
    {
      return sfView::SUCCESS;
    }
    $this->form->bind($request->getParameter($this->form->getName()));
    if ($this->form->isValid())
    {
      $this->form->save();
      $this->getUser()->addInfo('Your account information has been updated.');
      $this->redirect($this->getModuleName().'/index');
    }
    $this->getUser()->addError('The values you submitted contains errors.');
  }

  public function executeMyPreferences(sfWebRequest $request)
  {
    $this->form = new chCmsUserPreferencesForm();
    if (!$request->isMethod('post'))
    {
      return sfView::SUCCESS;
    }
    $this->form->bind($request->getParameter($this->form->getName()));
    if ($this->form->isValid())
    {
      $this->form->save();
      $this->getUser()->addInfo('Your preferences has been updated.');
      $this->redirect($this->getModuleName().'/index');
    }
    $this->getUser()->addError('The values you submitted contains errors.');
  }
  /**
   * ask for a new password
   *
   * @return sfView::SUCCESS
   **/
  public function executeLostPassword(sfWebRequest $request)
  {
    $this->form = new chCmsUserResendPasswordForm();
  }

  /**
   * entry point for RequestNewPassword action
   * check the user mail address, and if user exists, send a mail
   * with a token used to access password regenration
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeRequestNewPassword(sfWebRequest $request)
  {
    $form = new chCmsUserResendPasswordForm();

    $form->bind($request->getParameter($form->getName()), $request->getFiles($form->getName()));

    if ($form->isValid())
    {
      // get the matching user
      $user = $form->getMatchingUser();
      // delete any old token
      GuardExtraPasswordChangeTokenQuery::create()
        ->findBysfGuardUserId($user->getId())
        ->delete();

      // create the token
      $token = new GuardExtraPasswordChangeToken();
      $token->setsfGuardUserId($user->getId());
      $token->setToken(substr(md5(rand(1,9999)) , rand(0,20), rand(5,8)));
      $token->save();

      //NOTIFY
      $this->getUser()->sendLostPasswordMessage($user, $token);

      //notify user
      $this
        ->getUser()
          ->addInfo('A link to reset your password has been sent to %email%.',
                            array('%email%' => $form->getValue('email')));

      // redirect to signin
      $this->redirect('sf_guard_signin');
    }

    // form is invalid
    $this->form = $form;
    $this->setTemplate('lostPassword');
  }

  /**
   * Actually change the user password if provided mail is matching a user.
   *
   * to configure mail, provide following parameters:
   *  - ch_cms_guard_extra_resend_password_from_name
   *  - ch_cms_guard_extra_resend_password_from_mail
   *  - ch_cms_guard_extra_resend_password_from_subject
   *
   * and override the resendPasswordMail partial.
   *
   * @param sfWebRequest $request the user request
   * @return
   * @see chCmsGuardUserExtraTools
   */
  public function executeRegeneratePassword(sfWebRequest $request)
  {
    $token = GuardExtraPasswordChangeTokenQuery::create()
                ->joinWithsfGuardUser()
                ->findOneByToken($request->getParameter('token'));

    if (  $token && ($user = $token->getsfGuardUser()) &&
          (strtolower($user->getUsername()) === strtolower($request->getParameter('username'))) &&
          ($user->getId() === (int) $request->getParameter('id')))
    {
      // delete token
      $token->delete();

      // now regenerate password
      $password = substr(md5(rand(1,9999)) , rand(0,20), rand(5,8));
      $user->setPassword($password);

      // retrieve the user mail
      $mail = chCmsGuardUserExtraTools::retrieveMail($user);

      //notify user
      $this
        ->getUser()
          ->addInfo('New password has been sent to %email%.',
                            array('%email%' => $mail));

      //NOTIFY
      $this->getUser()->sendResendPasswordMessage($user, $password);

      // save the user password
      $user->save();

      // redirect to signin
      $this->redirect('sf_guard_signin');
    }

    // error ?
    $this
      ->getUser()
        ->addError('Unable to find user matching given parameters. You might ask for a new password again.');

    $this->redirect('sf_guard_request_password');
  }


}

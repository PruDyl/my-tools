<?php
/**
 * defines the helpers for the application
 * @package    chCmsBasePlugin
 * @subpackage default
 * @author     Julien Muetton <julien_muetton@carpe-hora.com>
 */
use_helper('I18N', 'JavascriptBase', 'Jquery');

/**
 * returns an info box
 */
function jui_get_info_box($message, $replace = array())
{
  return strtr(
  '<div class="ui-widget info-box">
    <div  class="ui-state-highlight ui-corner-all" style="padding: 0pt 0.7em;">
      <p>
        <span class="ui-icon ui-icon-info" style="float: left; margin-right: 0.3em;"></span>
         <b>%LABEL%</b>
        <span class="ch-info-msg">%MESSAGE%</span>
      </p>
    </div>
  </div>', array('%MESSAGE%' => __($message, $replace), '%LABEL%' => __('Info: ')));
}

/**
 * returns an error box
 */
function jui_get_error_box($message, $replace = array())
{
  return strtr(
  '
  <div class="ui-widget error-box">

    <div  class="ui-state-error ui-corner-all" style="padding: 0pt 0.7em;">
      <p>
        <span class="ui-icon ui-icon-alert" style="float: left; margin-right: 0.3em;"></span>
        <b>%LABEL%</b>
        <span class="ch-error-msg">%MESSAGE%</span>
      </p>
    </div>
  </div>', array('%MESSAGE%' => __($message, $replace), '%LABEL%' => __('Error: ')));
}

/**
 * writes an info box
 */
function jui_include_info_box($message, $replace = array())
{
  echo jui_get_info_box($message, $replace);
}

/**
 * writes an error box
 */
function jui_include_error_box($message, $replace = array())
{
  echo jui_get_error_box($message, $replace);
}

function jui_icon($icon, $title = '')
{
  return strtr('%ICON%&#160;%TITLE%', array(
                    '%ICON%'  => jui_get_icon($icon),
                    '%TITLE%' => __($title)));
}

/**
 * uses jquery plugin found at http://abeautifulsite.net/notebook/80
 * exemple:
 * echo jui_context_menu(
 *   array(
 *     jui_context_menu_item('cut', 'cut', 'alert(action)'),
 *     jui_context_menu_item('copy', 'copy', 'alert(action)'),
 *     jui_context_menu_item('delete', 'delete' )
 *   ),
 *   '#gallery li',
 *   array('id'=>'right-menu-gallery')
 * );
 */
function jui_context_menu($items, $selector = 'body', $options = array())
{
  use_javascript('/chCmsBasePlugin/js/jquery.contextMenu.js', sfWebResponse::LAST);
  cms_use_stylesheet('jquery.contextMenu.css', 'chCmsBasePlugin');
  $html_options = _parse_attributes($options);

  if (!array_key_exists('id', $html_options))
  {
    return jui_get_error_box('No id provided for jui_context_menu.');
  }


  if (array_key_exists('class', $html_options) && strlen($html_options['class']))
  {
    $html_options['class'] .= ' ui-widget-content ui-state-default contextMenu';
  }
  else
  {
    $html_options['class'] = 'ui-widget-content ui-state-default contextMenu';
  }

  if (array_key_exists('title', $html_options) && strlen($html_options['title']))
  {
    $html_options['title'] .= __($html_options['title']);
  }

  $elements = array();
  $functions = array();
  foreach ($items as $item)
  {
    $elements[] = $item['element'];
    if (array_key_exists('action', $item))
    {
      $functions[] = $item['action'];
    }
  }

  return  javascript_tag(strtr("
             $(function(){
               $('%SELECTOR%').livequery(function(){
                 $(this).contextMenu({menu: '%MENUID%'},function(action, el, pos){
                   switch(action)
                   {
                     %ACTIONS%
                     default: alert(%UNKNOWN_ACTION%.replace(/%action%/, action));
                   }
                 })
               });
             });
          ", array(
             '%SELECTOR%' => $selector,
             '%MENUID%'   => $html_options['id'],
             '%ACTIONS%'  => join('', $functions),
             '%UNKNOWN_ACTION%' => json_encode(__('Unknown action %action%'))
           )))
          .content_tag('ul', join("\n\t", $elements), $html_options);
}

function jui_context_menu_item($text, $actionName, $function = null, $options = array())
{
  $html_options = _parse_attributes($options);
  if (array_key_exists('class', $html_options) && strlen($html_options['class']))
  {
    $html_options['class'] .= ' ui-state-default '.$actionName;
  }
  else
  {
    $html_options['class'] = 'ui-state-default '.$actionName;
  }

  if (array_key_exists('title', $html_options) && strlen($html_options['title']))
  {
    $html_options['title'] .= __($html_options['title']);
  }

  $element = content_tag('li',
                          content_tag('a',
                                    __($text),
                                    sprintf('href=#%s', $actionName)),
                       $html_options);
  if ($function)
  {
    return array(
      'element'  => $element,
      'action'   => sprintf("case %s:\n\t%s\n\tbreak;\n", json_encode($actionName), $function)
    );
  }
  else
  {
    return array('element'  => $element);
  }
}



/*---------------- BUTTONS --------------------*/

function jui_get_icon($icon, $html_options = array())
{
  //extract size:
  if (preg_match('#(?P<icon>.+)-(?P<size>\d+)(?:x\d+)?$#', $icon, $matches))
  {
    $size = $matches['size'];
    $icon = $matches['icon'];
  }
  else
  {
    $size = '16';
  }
  if ($size != 16)
  {
    $size = sprintf(' ch-icon-%s', $size);
  }
  else
  {
    $size = '';
  }

  //extract the prefix:
  switch(true)
  {
    case strpos($icon, 'silk') === 0:
      $prefix = sprintf('ch-icon%s ch-icon-silk ch-icon', $size);
      break;
    case strpos($icon, 'social') === 0:
      $prefix = sprintf("ch-icon%s ch-icon-social ch-icon", $size);
      break;
    case strpos($icon, 'icojoy') === 0:
      $prefix = sprintf("ch-icon%s ch-icon-icojoy ch-icon", $size);
      break;
    default: //ui-icons
      $prefix = 'ui-icon ui-icon';
  }
  $icon_class = strtr("%ICON_PREFIX%-%ICON%", array(
                          '%ICON_PREFIX%' => $prefix,
                          '%ICON%'  => $icon));
  if (array_key_exists('class', $html_options))
  {
    $html_options['class'] .= ' '.$icon_class;
  }
  else
  {
    $html_options['class'] = $icon_class;
  }
  return content_tag('span', '', $html_options);
}

/**
 * get the options for button
 *
 * @return string the classes for button
 */
function jui_get_html_options_for_button ($html_options = array())
{
  $html_options = _add_class_attribute('ui-button ui-widget ui-state-default ui-corner-all', $html_options);

  //convert icon to primary-icon
  if (array_key_exists('icon', $html_options))
  {
    if ( !array_key_exists('primary-icon', $html_options) || !strlen($html_options['primary-icon']) )
    {
      $html_options['primary-icon'] = $html_options['icon'];
    }
    unset($html_options['icon']);
  }

  if (
      (!array_key_exists('primary-icon', $html_options) || !strlen($html_options['primary-icon'])) &&
      (!array_key_exists('secondary-icon', $html_options) || !strlen($html_options['secondary-icon']))
  )
  {
    $html_options['class'] .= ' ui-button-text-only';
  }

  if (array_key_exists('primary-icon', $html_options) && array_key_exists('secondary-icon', $html_options))
  {
    $html_options['class'] .= ' ui-button-text-icons';
    unset($html_options['primary-icon']);
    unset($html_options['secondary-icon']);
  }
  //treatment for primary-icon
  elseif (array_key_exists('primary-icon', $html_options))
  {
    $html_options['class'] .= ' ui-button-text-icon-primary';
    unset($html_options['primary-icon']);
  }

  //treatment for secondary-icon
  elseif (array_key_exists('secondary-icon', $html_options))
  {
    $html_options['class'] .= ' ui-button-text-icon-secondary';
    unset($html_options['secondary-icon']);
  }

  return $html_options;
}

/**
 * parses options and text to compose text for button
 *
 * @return string the button text
 */
function jui_get_text_for_button($text, $html_options = array())
{
  if (array_key_exists('icon', $html_options))
  {
    if ( !array_key_exists('primary-icon', $html_options) || !strlen($html_options['primary-icon']) )
    {
      $html_options['primary-icon'] = $html_options['icon'];
    }
    unset($html_options['icon']);
  }

  $text = content_tag('span', __($text), array('class' => 'ui-button-text'));

  // text only ?
  if (
      (!array_key_exists('primary-icon', $html_options) || !strlen($html_options['primary-icon'])) &&
      (!array_key_exists('secondary-icon', $html_options) || !strlen($html_options['secondary-icon']))
  )
  {
    return $text;
  }

  if (array_key_exists('primary-icon', $html_options) && strlen($html_options['primary-icon']))
  {
    $text = sprintf('%s%s',
              jui_get_icon($html_options['primary-icon'], array('class' => 'ui-button-icon-primary')),
              $text);
  }

  if (array_key_exists('secondary-icon', $html_options) && strlen($html_options['secondary-icon']))
  {
    $text = sprintf('%s%s',
              $text,
              jui_get_icon($html_options['secondary-icon'], array('class' => 'ui-button-icon-secondary')));
  }

  return $text;
}

/**
 * parse arguments for button display.
 * initiates the class and the text.
 *
 * @param string $text the button text
 * @param array $html_options the html options (plus icon)
 * @return array
 */
function jui_parse_arguments_for_button($text, $html_options = array())
{
  return array(jui_get_text_for_button($text, $html_options), jui_get_html_options_for_button ($html_options));
}

/**
 * create a button link with jquery ui style.
 * additionnal option is icon. adds an icon to the button on the left side.
 * EXAMPLE:
 * echo button_link('example', 'http://www.example.com', 'icon=newwin');
 */
function jui_button_link()
{
  $arguments = func_get_args();

  $text = $arguments[0];

  if (is_array($arguments[1]) || '@' == substr($arguments[1], 0, 1) || false !== strpos($arguments[1], '/'))
  {
    //no route parameters
    $route = $arguments[1];
    $html_options_index = 2;
  }
  else
  {
    //route parameters
    $routeName = $arguments[1];
    $params = $arguments[2];
    $html_options_index = 3;

    $route = array_merge(array('sf_route' => $routeName), is_object($params) ? array('sf_subject' => $params) : $params);
  }

  if (array_key_exists($html_options_index, $arguments))
  {
    $html_options = _parse_attributes($arguments[$html_options_index]);
  }
  else
  {
    $html_options = array();
  }

  list($text, $html_options) = jui_parse_arguments_for_button($text, $html_options);

  return link_to1($text, $route, $html_options);
}

/**
 * create a button with jquery ui style.
 * additionnal option is icon. adds an icon to the button on the left side.
 * EXAMPLE:
 * echo jui_button('example', 'icon=newwin', array('id' => 'bar');
 */
function jui_button($text, $icon='', $html_options = array())
{
  $html_options['icon'] = $icon;

  list($text, $html_options) = jui_parse_arguments_for_button($text, $html_options);

  return content_tag('span', $text, $html_options);
}

/**
 * @param string $text button text
 * @param array|string $html_options the html options
 */
function jui_submit_button($text = 'Save', $html_options = array())
{
  $html_options = _parse_attributes($html_options);

  //force the icon
  _set_default_attribute('icon', 'silk-disk', $html_options);

  //force the type if none given
  _set_default_attribute('type', 'submit', $html_options);

  list($text, $html_options) = jui_parse_arguments_for_button($text, $html_options);

  return content_tag('button', $text, $html_options);
}

/**
 *
 */
function jui_submit_object_form_button($form, $html_options = array())
{
  $html_options = _parse_attributes($html_options);

  if ($form->getObject()->isNew())
  {
    $text = 'Create';
    _set_default_attribute('icon', 'silk-add', $html_options);
  }
  else
  {
    $text = 'Save';
    _set_default_attribute('icon', 'silk-disk', $html_options);
  }

  return jui_submit_button($text, $html_options);
}

/**
 * creates a button to a javascript function with JqueryUiTheme
 * @param string $text button text
 * @param string $function the javascript to be executed
 * @param array|string $html_options the html options
 * @return string
 */
function jui_button_to_function($text, $function, $html_options = array())
{
  $html_options = _parse_attributes($html_options);

  list($text, $html_options) = jui_parse_arguments_for_button($text, $html_options);

  return button_to_function($text, $function, $html_options);
}

/**
 * creates a link to a javascript function with JqueryUi theme
 * @param string $text button text
 * @param string $function the javascript to be executed
 * @param array|string $html_options the html options
 * @return string
 */
function jui_link_to_function($text, $function, $html_options = array())
{
  $html_options = _parse_attributes($html_options);

  list($text, $html_options) = jui_parse_arguments_for_button($text, $html_options);

  return link_to_function($text, $function, $html_options);
}

/**
 * create a button link with jquery ui style.
 * additionnal option is icon. adds an icon to the button on the left side.
 * EXAMPLE:
 * echo button_link('example', 'http://www.example.com', 'icon=newwin');
 */
function jui_clickable_icon()
{
throw new sfError404Exception('jui_clickable_icon is now deprecated, use jui_button_link instead');
  $arguments = func_get_args();
  $arguments[0] = __($arguments[0]);

  if (count($arguments) > 1)
  {
    $html_options = _parse_attributes($arguments[count($arguments)-1]);
  }
  else
  {
    $html_options = array();
    $arguments[] = array();
  }

  if (array_key_exists('class', $html_options) && strlen($html_options['class']))
  {
    $html_options['class'] .= ' clickable-icon';
  }
  else
  {
    $html_options['class'] = 'clickable-icon';
  }

  if (array_key_exists('icon', $html_options) && strlen($html_options['icon']))
  {
    array_unshift($arguments, jui_icon($html_options['icon']));
    unset($html_options['icon']);
  }

  if (array_key_exists('title', $html_options) && strlen($html_options['title']))
  {
    $html_options['title'] = __($html_options['title']);
  }

  $arguments[count($arguments)-1] = $html_options;

  return call_user_func_array('link_to', $arguments);
}

/*---------------- Definition --------------------*/
/**
 * create a definition for a given label (for qtip)
 *
 * @return <div></div>
 * @example <?php echo jui_definition_label('toto', 'ceci est le prénom de toto') ?>
 * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
 **/
function jui_definition_label($label, $definition)
{
  return '<div class="definition-container">
            <span class="definition-label">'.$label.'</span>
            <div class="definition-text">'.$definition.'</div>
          </div>';
}

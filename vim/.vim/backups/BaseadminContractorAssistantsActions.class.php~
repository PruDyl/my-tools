<?php

/**
 * Base actions for the chCmsAdminContractorPlugin adminContractorAssistants module.
 * 
 * @package     chCmsAdminContractorPlugin
 * @subpackage  adminContractorAssistants
 * @author      Your name here
 * @version     SVN: $Id$
 */
abstract class BaseadminContractorAssistantsActions extends chCmsAdminPanelActions
{
  protected function retrieveAssistanceLink(sfWebRequest $request)
  {
    AdminContractorAssistantTools::retrieveAssistanceLink($this, $request);
  }

  protected function getContractor(sfWebRequest $request)
  {
    AdminContractorAssistantTools::getContractor($this, $request);
  }

  /**
   * entry point for ShowAssistant action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeShowAssistant(sfWebRequest $request)
  {
    $this->retrieveAssistanceLink($request);

    if ($request->isXmlHttpRequest())
    {
      $data = $this->processAjaxResult(array('html' => $this->getPartial('adminContractorAssistants/contractorShowAssistanceLink', array(
            'group' => $this->group,
            'assistantLink' => $this->assistantLink,
            'contractor' => $this->contractor,
            'assistantName' => $this->assistantName,
            'assistant' => $this->assistant,
            'current' => $this->current
            ))));
      
      return $this->renderText(json_encode($data));
    }

    $this->redirect($this->getRoute()->getGroup()->generateUrl('assistant_list', array('contractor_id' => $this->current->getId())));
  }

  /**
   * entry point for EditAssistant action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeEditAssistant(sfWebRequest $request)
  {
    $this->retrieveAssistanceLink($request);

    $this->form = new AssistantLinkForm($this->assistantLink);
    
    if ($request->isXmlHttpRequest())
    {
      $data = $this->processAjaxResult(array('html' => $this->getPartial('adminContractorAssistants/contractorEditAssistanceLink', array(
            'form' => $this->form,
            'group' => $this->group,
            'assistantLink' => $this->assistantLink,
            'contractor' => $this->contractor,
            'assistantName' => $this->assistantName,
            'assistant' => $this->assistant,
            'current' => $this->current
            ))));
      
      return $this->renderText(json_encode($data));
    }

    $this->setTemplate('assistant_edit_without_ajax', $this->getRoute()->getGroup());
  }

  /**
   * entry point for UpdateAssistant action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeUpdateAssistant(sfWebRequest $request)
  {
    $this->retrieveAssistanceLink($request);

    $form = new AssistantLinkForm($this->assistantLink);
    
    return $this->processForm($form);
  }

  public function executeDeleteAssistant(sfWebRequest $request)
  {
    $this->retrieveAssistanceLink($request);

    if (!$this->assistantLink->isNew())
    {
      $this->assistantLink->delete();
    }
    if ($request->isXmlHttpRequest())
    {
      $data = $this->processAjaxResult(array('html' => $this->getPartial('adminContractorAssistants/contractorShowAssistanceLink', array(
            'assistantLink' => $this->assistantLink,
            'contractor' => $this->contractor,
            'assistantName' => $this->assistantName,
            'assistant' => $this->assistant,
            'current' => $this->current
              ))));

      return $this->renderText( json_encode( $data ) );
    }

    $this->redirect($this->getRoute()->getGroup()->generateUrl('assistant_list', array('contractor_id' => $this->current->getId())));
  }

  protected function processAjaxResult($data = array())
  {
    if ($this->getUser()->hasError())
    {
      $data['success'] = false;
      $data['messages'] = $this->getUser()->getErrors();
    }
    else
    {
      $data['success'] = true;
      $data['messages'] = $this->getUser()->getInfos();
    }

    $this->getUser()->resetMessages();
    
    return $data;
  }

  protected function processForm($form)
  {
    $request = $this->getRequest();

    $form->bind($request->getParameter($form->getName()));
   
    if ($form->isValid())
    {
      $this->assistantLink = $form->save();
      $this->getUser()->addInfo('Les données ont été enregistrées.');
  
      if ($request->isXmlHttpRequest())
      {
        $data = $this->processAjaxResult(array('html' => $this->getPartial('adminContractorAssistants/contractorShowAssistanceLink', array(
              'group' => $this->group,
              'assistantLink' => $this->assistantLink,
              'contractor' => $this->contractor,
              'assistantName' => $this->assistantName,
              'assistant' => $this->assistant,
              'current' => $this->current
              ))));
        
        return $this->renderText(json_encode($data));
      }
      else 
      {
        $this->redirect($this->getRoute()->getGroup()->generateUrl('assistant_list', array('contractor_id' => $this->current->getId())));
      }
    }
    else 
    {
      $this->getUser()->addError('Les données passées comportent des erreurs. Merci de les corriger.');

      if ($request->isXmlHttpRequest())
      {
        $data = $this->processAjaxResult(array('html' => $this->getPartial('adminContractorAssistants/contractorEditAssistanceLink', array(
              'form' => $form,
              'group' => $this->group,
              'assistantLink' => $this->assistantLink,
              'contractor' => $this->contractor,
              'assistantName' => $this->asssistantName,
              'assistant' => $this->assistant,
              'current' => $this->current
              ))));
        
        return $this->renderText(json_encode($data));
      }
    }

    $this->setTemplate('assistant_edit', $this->getRoute()->getGroup());
  }
  /**
   * entry point for EditDefaultAssistant action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeEditDefaultAssistant(sfWebRequest $request)
  {
    $this->getContractor($request);

    $this->defaultRightsForm = new ContractorDefaultAssistantRightsForm($this->contractor);

    if ($request->isXmlHttpRequest())
    {
      $data = $this->processAjaxResult(array( 'html' => $this->getPartial('adminContractorAssistants/contractorEditDefaultAssistanceLink', array(
              'group' => $this->group,
              'contractor' => $this->contractor,
              'company' => $this->getUser()->getSelectedCompany(),
              'defaultRightsForm' => $this->defaultRightsForm
          ))));

      return $this->renderText(json_encode($data));
    }

    $this->setTemplate('assistant_default_edit_without_ajax', $this->getRoute()->getGroup());
  }

  /**
   * entry point for UpdateDefault action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeUpdateDefault(sfWebRequest $request)
  {
    $this->getContractor($request);

    $defaultRightsForm = new ContractorDefaultAssistantRightsForm($this->contractor);
    $defaultRightsForm->bind($request->getParameter($defaultRightsForm->getName()));
     
    $this->defaultRightsForm = $defaultRightsForm; 
    if ($defaultRightsForm->isValid())
    {
      $this->contractor = $defaultRightsForm->save();
      $this->getUser()->addInfo('Les données ont été enregistrées.');
      
      if ($request->isXmlHttpRequest())
      {
        $data = $this->processAjaxResult(array( 'html' => $this->getPartial('adminContractorAssistants/contractorShowDefaultAssistanceLink', array(
                'group' => $this->group,
                'contractor' => $this->contractor,
                'company' => $this->getUser()->getSelectedCompany(),
                'defaultRightsForm' => $this->defaultRightsForm
                ))));

        return $this->renderText(json_encode($data));
      }else 
      {
        $this->redirect($this->getRoute()->getGroup()->generateUrl('assistant_list', array('contractor_id' => $this->contractor->getId())));
      }
    
    }else{
      $this->getUser()->addError('champ invalide');

      if ($request->isXmlHttpRequest())
      {
        $data = $this->processAjaxResult(array( 'html' => $this->getPartial('adminContractorAssistants/contractorEditDefaultAssistanceLink', array(
                'group' => $this->group,
                'contractor' => $this->contractor,
                'company' => $this->getUser()->getSelectedCompany(),
                'defaultRightsForm' => $this->defaultRightsForm
                ))));

        return $this->renderText(json_encode($data));
      }else 
      {
        $this->setTemplate('assistant_default_edit_without_ajax', $this->getRoute()->getGroup());
      }
    }
  }

  /**
   * entry point for ShowDefault action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeShowDefault(sfWebRequest $request)
  {
    $this->getContractor($request);
    
      if ($request->isXmlHttpRequest())
      {
        $data = $this->processAjaxResult(array( 'html' => $this->getPartial('adminContractorAssistants/contractorShowDefaultAssistanceLink', array(
                'group' => $this->group,
                'contractor' => $this->contractor,
                'company' => $this->getUser()->getSelectedCompany(),
                ))));

        return $this->renderText(json_encode($data));
      }else 
      {
        $this->redirect($this->getRoute()->getGroup()->generateUrl('assistant_list', array('contractor_id' => $this->contractor->getId())));
      }
  }
}

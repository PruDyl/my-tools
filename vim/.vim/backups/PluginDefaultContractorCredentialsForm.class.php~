<?php
/**
 * This file declare the PluginDefaultContractorCredentialsForm class.
 *
 * @package chCmsAdminContractorPlugin
 * @subpackage form
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-01-07
 */

/**
 * the base class for the DefaultContractorCredentials form
 * requires a "contractors" option
 */
class PluginDefaultContractorCredentialsForm extends BaseCredentialForm
{
  /**
   * the setup function
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function setup()
  {
    parent::setup();

    $this->widgetSchema->setNameFormat('contractor_rights[%s]');
    $permissions = $this->getAdminPermissionList();
    $validPerm = array_keys($permissions);

    foreach ($this->getContractors() as $contractor)
    {
      $label = $contractor->getId();
      $form = new ContractorCredentialsForm();
      $form->setCredentials($contractor->getCredentials());
      $form->widgetSchema->setNameFormat(sprintf('contractor_rights[%s][%%s]', $label));
      $this->embedForm($label, $form);

      $this->widgetSchema->setLabel(
            $label, 
            $contractor->getCompanyName());
    }

    $form = new ContractorCredentialsForm();
    $form->setCredentials($this->getCompany()->getDefaultCredentials());
    $form->widgetSchema->setNameFormat('contractor_rights[default][%s]');
    $this->embedForm('default', $form);
    $this->widgetSchema->setLabel('default', 'Par d√©faut');
  }

  /**
   * do save contractor
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected function doSaveForContractor($contractor, PropelPDO $con)
  {
    CompanyEntityCredentialQuery::create()
          ->filterByEntity($contractor)
          ->delete($con);

    $credentials = $this->getValue($contractor->getId());

    foreach ($credentials as $c => $checked)
    {
      if ($checked)
      {
        $credential = new CompanyEntityCredential();
        $credential->setEntity($contractor);
        $credential->setCredential($c);
      }
    }

    $contractor->save($con);
  }

  /**
   * do save the default credentials
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function doSaveDefaults(PropelPDO $con)
  {
    $company = $this->getCompany();
    CompanyDefaultCredentialQuery::create()
        ->filterByCompany($company)
        ->delete($con);

    $credentials = $this->getValue('default');

    foreach ($credentials as $c => $checked)
    {
      if ($checked)
      {
        $credential = new CompanyDefaultCredential();
        $credential->setCompany($company);
        $credential->setCredential($c);
      }
    }

    $company->save($con);
  }

  /**
   * the save function. first remove all, the add the new ones.
   *
   * @return array
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function save(PropelPDO $con = null)
  {
    if (!$this->isBound())
    {
      throw new sfException('form is not bound');
    }

    if (null === $con)
    {
      $con = $this->getConnection();
    }

    try
    {
      $con->beginTransaction();

      foreach ($this->getContractors() as $contractor) 
      {
        $this->doSaveForContractor($contractor, $con);
      }

      $this->doSaveDefaults($con);

      $con->commit();
    }
    catch(Exception $e)
    {
      $con->rollback();
      throw $e;
    }
    
  }
  
  /**
   * getter for contractors
   * @access public
   *
   * @return array the contractors value
   */
  public function getContractors()
  {
    return $this->getOption('contractors', array());
  }
  
  /**
   * @return PropelPDO
   * @see sfFormObject
   */
  public function getConnection($model = 'CompanyEntity')
  {
    $peer = constant($model.'::PEER');
    return Propel::getConnection(constant($peer.'::DATABASE_NAME'));
  }
} // END OF PluginDefaultContractorCredentialsForm

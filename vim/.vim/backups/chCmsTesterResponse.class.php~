<?php
/**
 * This file declare the chCmsTesterResponse class.
 *
 * @package T-resa-lib
 * @subpackage Test
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-02-17
 */

/**
 * the tester used for agenda testing purpose
 */
class chCmsTesterResponse extends sfTesterResponse
{
  protected $json_errors = array(
    JSON_ERROR_DEPTH      => 'The maximum stack depth has been exceeded',
    JSON_ERROR_CTRL_CHAR  => 'Unexpected control character found',
    JSON_ERROR_SYNTAX     => 'Syntax error',
    JSON_ERROR_STATE_MISMATCH => 'JSON bad-formed',
    JSON_ERROR_UTF8       => 'UTF-8 error'

  );

  const MESSAGE_TYPE_INFO   = 'info';
  const MESSAGE_TYPE_ERROR  = 'error';


  public function isValidJson()
  {
    json_decode($this->response->getContent());

    if (($last_error = json_last_error()) == JSON_ERROR_NONE)
    {
      $this->tester->pass('response is well-formed json');
    }
    else
    {
      $this->tester->fail(sprintf('response is not a valid json string : %s', $this->json_errors[$last_error]));
    }

    return $this->getObjectToReturn();
  }

  /**
   * enable to print Json response
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function debugJson()
  {
    var_dump(json_decode($this->response->getContent()));
    exit(1);
  }

  /**
   * check response contains given message
   *
   * @param string  $message
   * @param boolean $fullmessage  check against all string (not as part)
   * @param String  $type         error type
   * @return sfTester
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function checkUserMessage($message, $fullmessage = false, $type = null)
  {
    switch ($type)
    {
      case self::MESSAGE_TYPE_ERROR:
        $selector = '.error-box .ch-error-msg';
        break;
      case self::MESSAGE_TYPE_INFO:
        $selector = '.info-box .ch-info-msg';
        break;
      default:
        $selector = 'div';
    }

    $selector = sprintf('#messages %s ', $selector);
    $this->checkElement($selector, '/' .
                              ($fullmessage ? '^[\s\n\r]*' : '') .
                              preg_quote($message, '/') .
                              ($fullmessage ? '[\s\n\r]*$' : '') .
                              '/');

    return $this->getObjectToReturn();
  }

  /**
   * check response contains $message as an error message
   *
   * @param string $message
   * @param boolean $fullmessage chekc against all string (not as part)
   * @return sfTester
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function checkErrorMessage($message, $fullmessage = false)
  {
    return $this->checkUserMessage($message, $fullmessage, self::MESSAGE_TYPE_ERROR);
  }

  /**
   * check response contains $message as an info message
   *
   * @param string $message
   * @param boolean $fullmessage chekc against all string (not as part)
   * @return sfTester
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function checkInfoMessage($message, $fullmessage = false)
  {
    return $this->checkUserMessage($message, $fullmessage, self::MESSAGE_TYPE_INFO);
  }
} // END OF sfTesterAgenda

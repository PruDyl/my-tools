<?php
/**
 * testfile for the adminContractorAssistants module.
 *Ludovic Pellé <ludovic_pelle@carpe-hora.com>
 * @copyright carpe-hora.com 2011
 * @package chCmsAdminMyAccountPlugin
 * @subpackage test
 *
 * @todo when request params are uniformed, check parameters
 **/

$app = "pro";

include(dirname(__FILE__).'/../../../../test/bootstrap/functional.php');

$browser = TresaTestFunctional::initialize(/* load to be able to authenticate */ true);


$browser
  ->info("Test not Logged")
  ->get('/admin/prestataires/personnel')

    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(401)
      ->isValid()
      ->checkForm(new chCmsFormSignin())
  ->end()
    // end of get /admin/prestataires/1/assistants
    // end of block check when not logged in
    
  ->signin('demo', 'demo', array('company' => 'demo 1'))
;
/**
 * Variables de test
 */
$company = $browser->getUser()->getSelectedCompany();
$browser->info(sprintf('vocabulaire utilisé pour assistants: "%s"', $company->getVocabulary('assistant', 2)));
$browser->info(sprintf('vocabulaire utilisé pour contractors: "%s"', $company->getVocabulary('contractor', 2)));
$contractor   = $company->getVocabulary('contractor', 1);
$contractors  = $company->getVocabulary('contractor', 2);
$assistant    = $company->getVocabulary('assistant', 1);
$assistants   = $company->getVocabulary('assistant', 2);
$demo = sfGuardUserQuery::create()->findOneByUsername('demo');
$company_entities = $demo->getCompanyEntitys();
$company = $company_entities[0]->getCompany();
$pro = sfGuardUserQuery::create()->findOneByUserName('pro1');

/**
 * get values for a contractor post query
 *
 * @return array
 **/
function test_get_contractor($params = array())
{
  return array_merge(array(
        'company_name' => 'User1 UTILISATEUR',
        'agenda_header' => 'User1 UTILISATEUR',
        'public_name' => 'User1 UTILISATEUR',
        'mail' => 'user1@t-resa.fr',
      ), $params);
}
$browser

  ->info("1 - display admin panel and search button assistant")
  ->click('administration')
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->isValid()
      ->contains(ucfirst($contractors))
    ->end()

  ->click(ucfirst($contractors))
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->isValid()
      ->contains('son profil')
      ->contains(sprintf('ses %s', $assistants))
      ->contains('Supprimer')
    ->end()
  
  ->info("2 - add a contractor")
    ->click(sprintf('Ajouter un %s', $contractor))
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->checkForm(new ContractorAdminProfileForm())
      ->checkForm(new LookupForUserForm())
      ->contains('Créer')
    ->end()
    // end of click Ajouter un prestataire
  // end of block add a contractor

  ->info("2.1 - post form to create a new contractor")
    ->click('Créer', array('contractor_admin_profile' => test_get_contractor()))
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('post')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()

    ->with('response')->begin()
      ->isForwardedTo('adminContractor', 'create')
      ->isRedirected()
    ->end() // end on response block

    ->followRedirect()
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->isValid()
      ->contains('Vous ne pouvez plus ajouter de prestataire')
      ->contains('Les données ont été ajoutées')
      ->checkElement('a[title="Profil de User1 UTILISATEUR"]')
    ->end()
    // end of click Créer

    ->with('propel')->begin()
      //also check the zip code is auto filled
      ->check('Contractor', test_get_contractor(array(
                'company_id'    => $company->getId(),
                'zip_code'      => $company->getZipCode())))
    ->end() // end on propel block
  // end of block post form to create a new contractor

  ->info("3 - now edit a contractor")
    ->click('a[title="Profil de User1 UTILISATEUR"]')
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
      ->isForwardedTo('admin', 'component')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->checkForm(new ContractorAdminProfileForm())
      ->checkForm(new LookupForUserForm())
      ->contains('Enregistrer')
    ->end()
    // end of click a[title="Profil de User1 UTILISATEUR"]

    ->click('Enregistrer', array('contractor_admin_profile' => array('company_name' => 'demo_test')))
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('put')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
      ->isForwardedTo('adminContractor', 'update')
    ->end()

    ->with('response')->begin()
      ->isRedirected()
    ->end() // end on response block

    ->with('propel')->begin()
      ->check('Contractor', test_get_contractor(array(
          'company_name'  => 'demo_test',
          'zip_code'      => $company->getZipCode(),
          'company_id'    => $company->getId()
          )))
    ->end() // end on propel block

    ->followRedirect()

    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
      ->isForwardedTo('admin', 'component')
    ->end() // end on request block
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->isValid()
    ->end()
    // end of click Enregistrer
  // end of block now edit a contractor

  ->info(" 4- tests for extra form fields")
  ->info("4.1 - access form from edition")

      ->click('a[title="Profil de demo_test"]')
      
      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'admin')
        ->isParameter('action', 'index')
        ->isForwardedTo('admin', 'component')
      ->end()
      
      // check the response
      ->with('response')->begin()
        ->isStatusCode(200)
        // TODO due to symfony generator this is not HTML5 valid
        //->isValid()
        ->contains('Champs personnalisés')
        ->contains('Paramétrer les champs du profil prestataire')
      ->end()
      // end of click Prestataires

      ->click('Paramétrer les champs du profil prestataire')
      
      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'admin')
        ->isParameter('action', 'index')
        ->isForwardedTo('admin', 'component')
      ->end()
      
      // check the response
      ->with('response')->begin()
        ->isStatusCode(200)
        ->isValid()
        ->contains('Aucun champ définit pour le moment')
        ->contains('Ajouter un champ')
      ->end();




//get the contractor (now he exists)
$user_test = CompanyEntityQuery::create()->findOneByCompanyName('demo_test');
//param for bind
$params = array('lookup_for_user'=> array('user_id' => $pro->getId(),
                                       'pin_code' => ''
                                       )
              );

$browser
->info('5 - Now try to bind a contractor and first control if isnt binded')
   ->click(ucfirst($contractors))

// check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->checkElement('table#contractors-list tbody tr:contains("'.$user_test->getCompanyName().'") td:eq(1):contains("Pas d\'utilisateur")')
    ->end()

   ->click('a[title="Profil de demo_test"]')
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
      ->isForwardedTo('admin', 'component')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->checkForm(new LookupForUserForm())
      ->checkForm(new LookupForUserForm())
      ->contains('Lier à un compte utilisateur')
    ->end()

->info('5.1 Test lookupForUser')
  
  ->get('http://pro.t-resa.loc/admin/prestataires/search/user?term=pro1')
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()
    
    // check the response
    ->with('response')->begin()
    ->isForwardedTo('adminContractorUser', 'lookupForUser')
      ->isValidJson()
    ->end()
   // end of get url


->info('5.2 Now test bind')


    ->get(sprintf('/admin/%s/%d/bind', $contractors, $user_test->getId()), $params, array('_with_csrf' => true) )
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isForwardedTo('adminContractorUser', 'bind')
      ->isRedirected()
    ->end()

    ->followRedirect()

    ->with('response')->begin()
      ->isStatusCode(200)
      ->checkElement('table#contractors-list tbody tr:contains("'.$user_test->getCompanyName().'") td:eq(1):contains("pro1")')
    ->end()
    // end of get url

    ->get(sprintf('/admin/%s/%d/unbind', $contractors, $user_test->getId()), $params, array('_with_csrf' => true))
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()
    
    // check the response
    ->with('response')->begin()
      ->isForwardedTo('adminContractorUser', 'unbind')
      ->isRedirected()
    ->end()

    ->followRedirect()

    ->with('response')->begin()
      ->isStatusCode(200)
      ->checkElement('table#contractors-list tbody tr:contains("'.$user_test->getCompanyName().'") td:eq(1):contains("pro1")', 0)
    ->end()
    // end of get sprintf('/admin/%s/%d/bind', $contractors, $user_test->getId()), $params, array('_with_csrf' => true) 
    


->info('5.4 Save change')
  // return to list
  ->get('/my')
  ->click('administration')
  ->click(ucfirst($contractors))
  ->click('Liste')
  ->click('a[title="Profil de demo_test"]')

  ->click('Enregistrer', array('contractor_admin_profile' => array('company_name' => 'demo_test')))
    
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('put')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
      ->isForwardedTo('adminContractor', 'update')
    ->end()

    ->with('response')->begin()
      ->isRedirected()
    ->end() // end on response block

    ->with('propel')->begin()
      ->check('Contractor', test_get_contractor(array(
          'company_name'  => 'demo_test',
          'zip_code'      => $company->getZipCode(),
          'company_id'    => $company->getId()
          )))
    ->end() // end on propel block

    ->followRedirect()

    ->with('request')->begin()
      ->isMethod('get')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
      ->isForwardedTo('admin', 'component')
    ->end() // end on request block
    
    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->isValid()
    ->end() 


  ->info('6. delete last contractor')

    ->click(ucfirst($contractors))
    ->click('Supprimer', array(), array('method' => 'delete', '_with_csrf' => true, 'position' => 3))
    //check routing is OK
    ->with('request')->begin()
      ->isMethod('delete')
      ->isParameter('module', 'admin')
      ->isParameter('action', 'index')
    ->end()

    // check the response
    ->with('response')->begin()
      ->isRedirected()
    ->end()

      ->followRedirect()

    // check the response
    ->with('response')->begin()
      ->isStatusCode(200)
      ->isValid()
      // insert your tests here
    ->end()
    // end of get url    
  // end of click Paramétrer les champs du profil prestataire
      
    // end of block access form form edition*/
    ;

// vim: ft=symfony.php.sftest

<?php
/**
 * testfile for the adminMyAccount module.
 *
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright carpe-hora.com 2011
 * @package chCmsAdminMyAccountPlugin
 * @subpackage test
 *
 * @todo when request params are uniformed, check parameters
 **/

//include dirname(__FILE__).'/../bootstrap/functional.php';
$app = "pro";

include(dirname(__FILE__).'../../../bootstrap/functional.php');

$browser = TresaTestFunctional::initialize(/* load to be able to authenticate */ true);
$browser->info('start tests');

$browser
  ->info('1 - Display without log')
    ->get('/admin/mon-compte/edit')
    ->with('response')->begin()
      ->isStatusCode(401)
      ->isValid()
    ->end()


  ->info('2 - signin')
    ->signin('demo','demo')
    ->get('/admin/mon-compte/edit')
    //check the routing is OK
    ->with('request')->begin()
      // TODO
      //->isParameter('adminModule', 'adminMyAccount')
      //->isParameter('adminAction', 'index')
    ->end()
    ;


$company = $browser->getUser()->getSelectedCompany();
$contractor = $browser->getUser()->getCompanyEntity();

/**
 * a set of user related routes, not default activated
 * when user is company admin
 */
$AccountRoutes = array(
                    array('url' => '/admin/mon-compte/edit', 'credential' => 'my_account', 'menu' => 'Mon compte'),
                    array('url' => '/admin/mon-compte/assistants', 'credential' => 'my_assistants', 'menu' => sprintf('Mes %s', $company->getVocabulary('assistant', 2))),
                    array('url' => '/admin/mon-compte/preferences', 'credential' => 'my_preferences', 'menu' => 'Mes préférences'),
                    array('url' => '/admin/mon-compte/rights', 'credential' => 'my_rights', 'menu' => 'Mes droits'),
                   );

/**
 * a set of user related routes, default activated
 * when user is company admin
 */
$AdminRoutes = array(
                    array('url' => '/admin/agenda/service', 'credential' => 'admin_edit_service', 'menu' => $company->getVocabulary('service', 1)),
                    array('url' => '/admin/agenda/horaires/ouverture', 'credential' => 'admin_free_busy', 'menu' => 'Ouverture'),
                    array('url' => '/admin/prestataires/personnel', 'credential' => 'admin_edit_contractor', 'menu' => 'Liste'),
                    array('url' => '/admin/prestataires/employer_profile', 'credential' => 'admin_edit_contractor', 'menu' => 'Profil complémentaire'),
                    array('url' => '/admin/prestataires/droits-acces', 'credential' => 'admin_edit_contractor', 'menu' => 'Droits d\'accès'),
                    array('url' => '/admin/entreprise/vocabulaire', 'credential' => 'admin_edit_vocabulary', 'menu' => 'Entreprise'),
                    array('url' => '/admin/t-resa/preferences', 'credential' => 'admin_edit_company', 'menu' => 'Centrale de réservation'),
                    array('url' => '/admin/t-resa/entreprise', 'credential' => 'admin_edit_company', 'menu' => 'Profil d\'entreprise'),
                    array('url' => '/admin/t-resa/contract', 'credential' => 'admin_view_contract', 'menu' => 'Contrat'),
                    );

/**
 * check validity of a set of routes.
 */
function test_admin_routes($browser, $dataset, $valid)
{
  foreach ($dataset as $data)
  {
    // prevent static vars to stay accross calls
    $browser
      ->getUser()->clearCredentials();
    
    AdminMenu::clearInstance();

    $browser
      ->get($data['url'])
      //check routing is OK
      ->with('request')->begin()
        ->isMethod('get')
        ->isParameter('module', 'admin')
        ->isParameter('action', 'index')
      ->end()
    
      // check the response
      ->with('response')->begin()
        ->isStatusCode($valid ? 200 : 404)
        ->checkElement('body .admin-panel:contains("' . $data['menu'] . '")', $valid ? 1: 0)
      ->end()
      ;
  }
}

function log_actual_truth_table($browser)
{
  $contractor = $browser->getUser()->getCompanyEntity();
  $company = $browser->getUser()->getSelectedCompany();

  // reset references
  $company->clearDefaultCredentialObjects();
  $contractor->clearCredentialObjects();

  $isAdmin = $contractor->getCompanyRights()->getIsAdmin();
  $hasCompanyDefaultCredential = $company->countDefaultCredentialObjects() > 0;
  $hasUserCredential = $contractor->countCredentialObjects() > 0;

  $results = array(
              '%is_admin%'          => $isAdmin,
              '%default_right%'     => $hasCompanyDefaultCredential,
              '%contractor_right%'  => $hasUserCredential,
              '%my_result%'         => $hasCompanyDefaultCredential || $hasUserCredential,
              '%admin_result%'      => $isAdmin || $hasCompanyDefaultCredential || $hasUserCredential);

  foreach ($results as $key => $value) 
  {
    $results[$key] = ($value ? 'I' : 'O');
  }

  return $browser->info(strtr(
        "\n-------------------------------------------------------------------------\n".
          "|\tadmin\t|\tCompany\t|\tuser\t||\tmy\t| admin\t|\n".
          "-------------------------------------------------------------------------\n".
          "|\t%is_admin%\t|\t%default_right%\t|\t%contractor_right%\t||\t%my_result%\t| %admin_result%\t|\n".
          "-------------------------------------------------------------------------", 
        $results));
}

/**
 * activate credentials defined in the dataset
 * @param Contractor $contractor
 * @param array $data
 */
function activate_contractor_credentials($contractor, $data)
{
  foreach ($data as $item) 
  {
    $contractor->addCredential($item['credential']);
  }

  $contractor->save();
}

/**
 * activate credentials defined in the dataset
 * @param Company $company
 * @param array $data
 */
function activate_company_credentials($company, $data)
{
  foreach ($data as $item) 
  {
    $company->addDefaultCredential($item['credential']);
  }

  $company->save();
}

function delete_company_credentials($company, $browser)
{
  $browser->getUser()->clearCredentials();
  CompanyDefaultCredentialQuery::create()->filterByCompany($company)->delete();
  $company->clearDefaultCredentialObjects();
  $company->getDefaultCredentialObjects();
  $browser->test()->is($company->countDefaultCredentialObjects(), 0, 'company has no more default credentials');
}

function delete_contractor_credentials($contractor, $browser)
{
  $browser->getUser()->clearCredentials();
  CompanyEntityCredentialQuery::create()->filterByEntity($contractor)->delete();
  $contractor->clearCredentialObjects();
  $contractor->getCredentialObjects();
  $browser->test()->is($contractor->countCredentialObjects(), 0, 'contractor has no more dedicated credentials');
}


$browser->getUser()->getGuardUser()->setIsSuperAdmin(false);
$browser->getUser()->getGuardUser()->save();
$browser
  ->info("3.1.1 > deactivate admin");
    $contractor->getCompanyRights()->setIsAdmin(false);
    $contractor->save();
    $browser->test()->ok(!$contractor->getCompanyRights()->getIsAdmin(), 'contractor is no more admin');

$browser
  ->info("3.1.2 > deactivate company default credentials");
    delete_company_credentials($company, $browser);

$browser
  ->info("3.1.3 > deactivate user credentials");
    delete_contractor_credentials($contractor, $browser);

    //-----------------------
    //| O | O | O ||  O | O |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, false);
    test_admin_routes($browser, $AdminRoutes, false);
    
    // end of block 3.1.3

$browser->info('3.2 > activate user credentials');
    activate_contractor_credentials($contractor, $AccountRoutes);
    activate_contractor_credentials($contractor, $AdminRoutes);

    //-----------------------
    //| O | O | 1 ||  1 | 1 |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, true);
    test_admin_routes($browser, $AdminRoutes, true);

  // end of block 3.2

$browser->info('3.3.1 > activate user credentials');
    activate_company_credentials($company, $AccountRoutes);
    activate_company_credentials($company, $AdminRoutes);

$browser
  ->info("3.3.2 > deactivate user credentials");
    delete_contractor_credentials($contractor, $browser);
    
    //-----------------------
    //| O | 1 | 0 ||  1 | 1 |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, true);
    test_admin_routes($browser, $AdminRoutes, true);

  // end of block 3.1.2

$browser->info('3.4 > activate user credentials');
    activate_contractor_credentials($contractor, $AccountRoutes);
    activate_contractor_credentials($contractor, $AdminRoutes);
    
    //-----------------------
    //| O | 1 | 1 ||  1 | 1 |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, true);
    test_admin_routes($browser, $AdminRoutes, true);

// end of block deactivate admin

;


$browser
  ->info("3.5.1 > reactivate admin");
    $contractor->getCompanyRights()->setIsAdmin(true);
    $contractor->save();
    $browser->test()->ok($contractor->getCompanyRights()->getIsAdmin(), 'contractor is back to admin');

$browser
  ->info("3.5.2 > deactivate user credentials");
    delete_contractor_credentials($contractor, $browser);
    
$browser
  ->info("3.5.3 > deactivate company default credentials");
    delete_company_credentials($company, $browser);

    //-----------------------
    //| 1 | O | O ||  O | 1 |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, false);
    test_admin_routes($browser, $AdminRoutes, true);

    // end of block 3.5.3 > deactivate company default credentials
$browser->info('3.6 > activate user credentials');
    activate_contractor_credentials($contractor, $AccountRoutes);
    activate_contractor_credentials($contractor, $AdminRoutes);

    //-----------------------
    //| 1 | O | 1 ||  1 | 1 |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, true);
    test_admin_routes($browser, $AdminRoutes, true);

  // end of block 3.2

$browser->info('3.7.1 > activate user credentials');
    activate_company_credentials($company, $AccountRoutes);
    activate_company_credentials($company, $AdminRoutes);

$browser
  ->info("3.7.2 > deactivate user credentials");
    delete_contractor_credentials($contractor, $browser);
    
    //-----------------------
    //| 1 | 1 | 0 ||  1 | 1 |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, true);
    test_admin_routes($browser, $AdminRoutes, true);

  // end of block 3.1.2

$browser->info('3.8 > activate user credentials');
    activate_contractor_credentials($contractor, $AccountRoutes);
    activate_contractor_credentials($contractor, $AdminRoutes);
    
    //-----------------------
    //| 1 | 1 | 1 ||  1 | 1 |
    //-----------------------
    log_actual_truth_table($browser);
    test_admin_routes($browser, $AccountRoutes, true);
    test_admin_routes($browser, $AdminRoutes, true);
// end of block reactivate admin

// vim: ft=symfony.php.sftest


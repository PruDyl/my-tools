<?php
/**
 * This file declare the oAuth2 class.
 *
 * @package chCmsGuardExtraPlugin
 * @subpackage provider
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-06-18
 */

require_once(sfConfig::get('sf_plugins_dir'). '/chCmsGuardExtraPlugin/lib/vendor/tmhOAuth/tmhOAuth.php');
/**
 * the oAuth2 base provider class.
 */
abstract class BaseOAuth2Consumer extends BaseConsumer
{
  abstract public function getConsumerKey();
  abstract public function getSharedSecret();
  abstract public function getHost();

  protected $authorize_url;
  protected $callback_url;

  /**
   * create the consumer
   *
   * @param sfRequest $request the request object.
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function __construct(sfRequest $request)
  {
  }

  /**
   * set the callback url for final landing (verify)
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function setAuthorizeUrl($callbackUrl)
  {
    $this->authorize_url = $callbackUrl;
  }

  /**
   * set the callback url for final landing (verify)
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function setCallbackUrl($callbackUrl)
  {
    $this->callback_url = $callbackUrl;
  }

  /**
   * get login url. depreaceted
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getLoginUrl($returnTo)
  {
    return $returnTo;
  }

  /**
   * get a oauth requester
   *
   * @return tmhOAuth
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected function getRequester()
  {
    $tmhOAuth = new tmhOAuth(array(
      'consumer_key'    => $this->getConsumerKey(),
      'consumer_secret' => $this->getSharedSecret(), ));

    if ($this->cacheGet('user_token') && $this->cacheGet('user_token_secret'))
    {
      $tmhOAuth->config['user_token']  = $this->cacheGet('user_token');
      $tmhOAuth->config['user_secret'] = $this->cacheGet('user_token_secret');
    }

    return $tmhOAuth;
  }

  /**
   * execute signin process.
   *
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function executeSigninProcess($request)
  {
    $tmhOAuth = $this->getRequester();

    if ($this->cacheGet('user_token') && $this->cacheGet('user_token_secret'))
    {
      return $this->callback_url;
    }

    if ($request->hasParameter('oauth_verifier'))
    {
      return $this->accessToken($tmhOAuth, $request->getParameter('oauth_verifier'), $this->callback_url);
    }

    if (!$this->cacheGet('user_token') || !$this->cacheGet('user_token_secret'))
    {
      return $this->requestToken($tmhOAuth, $this->authorize_url);
    }
  }

  protected function requestToken($tmhOAuth, $callback)
  {
    $tmhOAuth->config['user_token']  = null;
    $tmhOAuth->config['user_secret'] = null;

    $code = $tmhOAuth->request('POST', $tmhOAuth->url('oauth/request_token', ''), array(
      'oauth_callback' => $callback
    ));

    if (200 === $code)
    {
      $params = $tmhOAuth->extract_params($tmhOAuth->response['response']);
      $this->cachePut('tmp_token', $params['oauth_token']);
      $this->cachePut('tmp_token_secret', $params['oauth_secret']);

      $method = 'authenticate';

      return $tmhOAuth->url("oauth/{$method}", '') .  "?oauth_token={$params['oauth_token']}";
    }

    throw new sfException($tmhOAuth->response['response']);
  }

  /**
   * access user token
   *
   * @return string (callback url)
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected function accessToken($tmhOAuth, $verifier, $callback)
  {
    $tmhOAuth->config['user_token']  = $this->cacheGet('tmp_token');
    $tmhOAuth->config['user_secret'] = $this->cacheGet('tmp_token_secret');

    $code = $tmhOAuth->request('POST', $tmhOAuth->url('oauth/access_token', ''), array(
      'oauth_verifier' => $verifier
    ));

    if (200 === $code)
    {
      // store results
      $params = $tmhOAuth->extract_params($tmhOAuth->response['response']);
      $this->cachePut('user_token', $params['oauth_token']);
      $this->cachePut('user_token_secret', $params['oauth_token_secret']);

      // and clear cache
      $this->cacheClear('tmp_token');
      $this->cacheClear('tmp_token_secret');

      return $callback;
    }

    throw new sfException($tmhOAuth->response['response']);
  }

  /**
   * verify user login return
   *
   * @return boolean
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function verifyLogin()
  {
    if (!$this->getToken() ||
        !$this->getTokenSecret())
    {
      return false;
    }

    return $this->fetchUserAttributes();
  }

  /**
   * fetch user attributes from remote source
   *
   * @return void
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  protected function fetchUserAttributes()
  {
    $tmhOAuth = $this->getRequester();

    $tmhOAuth->request('GET', $tmhOAuth->url('1/account/verify_credentials'));
    $attributes = json_decode($tmhOAuth->response['response']);

    $this->initUserAttributes($attributes);

    return true;
  }

  /**
   * get the user token
   *
   * @return String
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getToken()
  {
    return $this->cacheGet('user_token');
  }

  /**
   * get the user token secret
   *
   * @return String
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getTokenSecret()
  {
    return $this->cacheGet('user_token_secret');
  }

  /**
   * get the user representation
   *
   * @return string
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public function getUser()
  {
    return $this->getToken();
  }
} // END OF oAuth2

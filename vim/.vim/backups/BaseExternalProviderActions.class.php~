<?php
/**
 * This file declare the BaseExternalProviderActions class.
 *
 * @package chCmsGuardExtraPlugin
 * @subpackage actions
 * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-06-17
 */

/**
 * the base class for external parovider actions
 */
abstract class BaseExternalProviderActions extends chCmsActions
{
  /**
   * check the request was successfull
   *
   * @param sfWebRequest $request the user request
   * @return boolean
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  abstract protected function isRequestSuccessfull(sfRequest  $request);

  /**
   * compute request checker
   *
   * @param sfWebRequest $request the user request
   * @return Mixed
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  abstract protected function getRequestChecker(sfRequest $request);

  /**
   * initialize external provider authentication from
   * current request
   *
   * @param Mixed $requestChecker   the returned request checker.
   * @return Authentication
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  abstract protected function getAuthentication($requestChecker);

  /**
   * initialize and prefill form for signup with this provider.
   * you should use $sf_user->setchCmsGuardExtraProviderForm
   * and$sf_user->setchCmsGuardExtraProviderFormValues methods.
   *
   * @param Mixed $requestChecker   the returned request checker.
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  abstract protected function prefillSignup($openid);

  /**
   * render result for verify action
   *
   * @return
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  protected function renderVerify($url, $requestChecker)
  {
    $this->returnUrl = $url;
    $this->setLayout(false);
    $requestChecker->authenticationProcessFinished();
    $this->setTemplate('verify', 'chCmsFrontendAccount');
  }

  /**
   * redirect user to signup or kick out if cannot signup
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  protected function redirectToSignupOrKickOut(sfRequest $request, Authentication $authentication, /* mixed */ $requestChecker)
  {
    $sf_user = $this->getUser();
    $extra_signin_params = $sf_user->parseSigninExtraParameters($request);

    if ($sf_user->canSignup())
    {
      $this->getUser()->setchCmsGuardExtraProvider($authentication);
      // create prefilled form,
      $this->prefillSignup($requestChecker);
      // and redirect user to signup process
      return $this->renderVerify($this->generateUrl($sf_user->getSignupUrl($request), $extra_signin_params, true), $requestChecker);
    }

    // still there ?
    // kickout.
    return $this->renderVerify($this->generateUrl($sf_user->getSigninKickOutRedirectUrl($request), $extra_signin_params, true), $requestChecker);
  }

  /**
   * return action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeVerify(sfWebRequest $request)
  {
    $sf_user = $this->getUser();
    $requestChecker = $this->getRequestChecker($request);

    $this->success = $this->isRequestSuccessfull($request);

    if (!$this->success)
    {
      return $this->renderVerify(null, $requestChecker);
    }

    if ( $authentication = $this->getAuthentication($requestChecker) )
    {

      if ( ! $authentication->isNew() && ! $sf_user->isAuthenticated() )
      {
        // get the guard user for this authentication
        if ($guardUser = $authentication->getUser())
        {
          $sf_user->setchCmsGuardExtraProvider($authentication);

          return $this->renderVerify($this->generateUrl('sf_guard_do_signin_provider'), $requestChecker);
        }

        // uhu ?
        // orphan provider...
        $authentication->delete();
        $authentication = $authentication->copy();
        // follow new authentication stuff

      } // end of is not New

      // init extra provider for further actions
      $sf_user->setchCmsGuardExtraProvider($authentication);

      // is the user authenticated
      if ($sf_user->isAuthenticated())
      {
        // associate account with provider
        return $this->renderVerify($this->generateUrl('sf_guard_associate_provider'), $requestChecker);
      }

      // signup with provider or kickout
      return $this->redirectToSignupOrKickOut($request, $authentication, $requestChecker);

    } // end if authentication found

    // no provider ?
    // ouch, cancelled or error: display template
    throw new LogicException('What appened there ?');
    return $this->renderVerify(null, $requestChecker);
  }

  /**
   * prepare external provider contact url, configure it and redirect.
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeRedirect(sfWebRequest $request)
  {
    $requestChecker = $this->getRequestChecker($request);

    $extra_signin_params = $this->getUser()->parseSigninExtraParameters($request);

    $returnTo = $this->generateUrl(null, array_merge(
                array('module' => $this->getModuleName(), 'action' => 'verify'),
                $extra_signin_params), true);

    try
    {
      $url = $requestChecker->getLoginUrl($returnTo);
    }
    catch(Exception $e)
    {
      $this->getUser()->addError('Les informations fournies sont incorrectes');
      $url = $request->getReferer();
    }

    $this->redirect($url);
  }
} // END OF BaseExternalProviderAction

<?php
/**
 * This file declare the AdminMyAccountTools class.
 *
 * @package chCmsAdminMyAccountPlugin
 * @subpackage lib
 * @author Julien Muetton <julien_muetton@carpe-hora.com>
 * @copyright (c) Carpe Hora SARL 2011
 * @since 2011-01-27
 */

/**
 * class used to assure consistancy between components and actions
 * for object manipulation.
 */
class AdminMyAccountTools
{
  /**
   * return the profile form to use.
   *
   * @param sfUser $sfUser the session user
   * @return sfGuardProfileForm
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public static function getProfileForm($sfUser)
  {
    $profileForm = new sfGuardProfileForm($sfUser->getProfile());
    unset($profileForm['user_id'], $profileForm['_csrf_token']);

    return $profileForm;
  }

  /**
   * return the entity profile form for given user and selected company
   *
   * @param sfUser $sfUser the session user
   * @return CompanyEntityProfileForm
   * @author Julien Muetton <julien_muetton@carpe-hora.com>
   **/
  public static function getEntityForm($sfUser)
  {
    $entityForm  = new MyAccountProfileForm($sfUser->getCompanyEntity());
    unset($entityForm['id']);

    return $entityForm;
  }
  
  /**
  * return the preference form for given user
  *
  * @param sfUser $sfUser the session user
  * @return sfGuardProPreferencesForm
  * @author  <ludovic.pelle@carpe-hora.com>
  **/
  public static function getPreferenceForm($sfUser)
  {
    $preferencesForm = new sfGuardProPreferencesForm($sfUser->getPreferences());
    return $preferencesForm;
  }

  public static function retrieveAssistanceLink($actions, sfWebRequest $request)
  {
    $actions->forward404Unless(
          $request->hasAttribute('assistant_id'),
          'Please provide assistant_id');

    $actions->contractor= $actions->getUser()->getCompanyEntity();
    $actions->collegues = $actions->contractor->getCollegues();

    $actions->assistant = $actions->contractor->getCollegue($request->getAttribute('assistant_id'));

    $actions->forward404Unless($actions->assistant, 'Unable to find the related collegue');

    $actions->assistantLink = $actions->assistant->getAssistanceLinkFor($actions->contractor);
    
    $actions->assistantName = $actions->assistant->getCompanyName();
  }

  /**
   * return list of all credential sorted by group
   *
   * @return void
   * @author Ludovic Pell√© <ludovic_pelle@carpe-hora.com>
   **/
  public static function getCredentialsListSortedByGroup()
  {
          $credentials_array = $AdminMenu::getInstance()->getAllCredentials();

          $cred_groups = array();
          
          foreach ($credentials_array as $id => $cred)
          {
            if (!array_key_exists($cred['group_name'], $cred_groups) && $cred['group_name']!= null)
            {
              $cred_groups[$cred['group_name']]= array();
            }
          
            if ($cred['group_name']=== null)
            {
              $cred['group_name']='Autres';
            }
      
            $cred_groups[$cred['group_name']][$id] = $cred;
          }
          krsort($cred_groups);
     return $cred_groups;
  }
}// END OF AdminMyAccountTools

<?php

/**
 * Base actions for the chCmsGuardExtraPlugin Associate module.
 *
 * @package     chCmsGuardExtraPlugin
 * @subpackage  Associate
 * @author      Your name here
 * @version     SVN: $Id$
 */
abstract class BaseAssociateActions extends sfActions
{
  /**
   * entry point for CreateAssociate action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeCreate(sfWebRequest $request)
  {
    $sf_user = $this->getUser();

    $this->form = new AssociateForm();

    $this->form->bind($request->getParameter($this->form->getName()));
    if ($this->form->isValid())
    {
      // get the existing user
      $guardUser = $this->form->getsfGuardUser();

      // get the type of provider
      $auth = $sf_user->getchCmsGuardExtraProvider();

      // link the auth object with the user
      chCmsGuardExtraUser::addProvider($guardUser, $auth);

      // cancel the auth
      $sf_user->cancelchCmsGuardExtraProviderAuth();

      // log in the user
      $classQuery = sprintf('%sQuery', get_class($auth));
      $account = $classQuery::create()->findOneByAccountIdentifier($auth->getAccountIdentifier());
      $sf_user->extraSignIn($this->getContext(), $account->getUser());

      $sf_user->addInfo('Votre compte a bien été associé et vous avez été connecté.');

      $this->redirect($sf_user->getSigninSuccessRedirectUrl($request));
    }

    $sf_user->addError('Impossible de faire l\'association avec le compte fourni : les identifiants sont corrects ?');

    $this->redirect('@sf_guard_signup');
  }

  /**
   * entry point for Delete action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeDelete(sfWebRequest $request)
  {
    $this->forward404Unless($this->getUser()->isAuthenticated());

    // if the user can log in only with a provider, we throw an error
    // -> 1 provider & password == 'null'
    $providers = AuthenticationPeer::getProvidersForUser($this->getUser());
    if (count($providers) == 1 AND $this->getUser()->hasDummyPassword())
    {
      $this->forward404('Vous ne pouvez pas effectuer cette action');
    }

    // we can only revoke our authentication methods
    if ($this->getRoute()->getObject()->getUserId() != $this->getUser()->getId())
    {
      $this->forward404('Vous ne pouvez pas effectuer cette action');
    }

    $this->getRoute()->getObject()->delete();
    return $this->redirect($this->getPostDeleteRedirect());

  }

  /**
   * undocumented function
   *
   * @return void
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function getPostDeleteRedirect()
  {
    return 'chCmsFrontendAccount/myPassword#providers';
  }
}

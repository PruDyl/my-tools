<?php

/**
 * Base actions for the chCmsAdminContractorPlugin adminContractorUser module.
 * 
 * @package     chCmsAdminContractorPlugin
 * @subpackage  module-adminContractorUser
 * @author      Julien Muetton <julien_muetton@carpe-hora.com>
 * @version     SVN: $Id$
 */
abstract class BaseadminContractorUserActions extends BasechCmsAdminContractorPluginAction
{
  /**
   * entry point for LookupForUser action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeLookupForUser(sfWebRequest $request)
  {
    // this is not a propel route, so no need to filter query before

    $this->forward404Unless( $request->hasParameter( 'term' ), 'please provide a term argument' );

    $query = $request->getParameter( 'term' );
    $this->forward404Unless( strlen( $query ) >= 2, 'please provide a term with at least 2 charchters' );

    $users = sfGuardUserQuery::create()
                  ->filterForQuery($query)
                  ->withColumn('sfGuardProfile.Firstname', 'Firstname')
                  ->withColumn('sfGuardProfile.Lastname', 'Lastname')
                  ->limit(10)
                  ->select(array('Id', 'Username', 'Firstname', 'Lastname'))
                  ->setFormatter('PropelArrayFormatter')
                  ->find();
    
    $results = array();
    foreach ($users as $user) 
    {
      $results[] = array(
          'label' => sprintf('%s (%s %s)', $user['Username'], $user['Firstname'], $user['Lastname']),
          'value' => $user['Id']
        );
    }
    return $this->renderText( json_encode( $results ) );
  }

  /**
   * entry point for Bind action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeBind(sfWebRequest $request)
  {
    $request->checkCSRFProtection();

    AdminContractorEntityTools::protectBind($this->getRoute(), $this->getUser());

    $contractor = $this->getRoute()->getObject();
    $company    = $this->getUser()->getSelectedCompany();

    // contractor is already bound
    if ($contractor->getUserId())
    {
      $this->getUser()->addError('Le %contractor% est déjà lié à un compte utilisateur.', array(
                                    '%contractor%' => $company->getVocabulary('contractor')));
    }
    else
    {
      $form = new LookupForUserForm(array(), array('autocomplete_url' => chCmsAdminContractorPluginRouting::getLookupForUserAcUrl()));

      $form->bind($request->getParameter($form->getName(), $request->getFiles($form->getName())));

      if ($form->isValid())
      {
        $contractor->setUserId($form->getsfGuardUser()->getId());
        $contractor->save();
      }
      else
      {
        $this->getuser()->addError('<ul><li>'. join('<li></li>', $form->getFormattedErrors()) . '</li></ul>');
      }
    }

    return $this->renderResult(array(
            "html" => $this->getPartial('adminContractor/linkContractor', array(
                                'contractor' => $contractor, 
                                'group' => $this->getRoute()->getGroup())),
                                'sf_user' => $form->getsfGuardUser()
          ), 'contractor_edit');
  }

  /**
   * entry point for Unbind action
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeUnbind(sfWebRequest $request)
  {
    $request->checkCSRFProtection();

    AdminContractorEntityTools::protectBind($this->getRoute(), $this->getUser());

    $contractor = $this->getRoute()->getObject();
    $company    = $this->getUser()->getSelectedCompany();
    
    // contractor is unbound
    if (!$contractor->getUserId())
    {
      $this->getUser()->addError("Le %contractor% n'est lié à aucun compte utilisateur", array(
                                    '%contractor%' => $company->getVocabulary('contractor')));
    }
    // that's the user
    elseif($contractor->getUserId() == $this->getuser()->getId())
    { 
      $this->getUser()->addError("Vous ne pouvez pas supprimer ce lien, vous n\'auriez plus accès à l\'application.");
    }
    // none of the others
    else
    {
      $contractor->setUserId(null);
      $contractor->save();
    }

    return $this->renderResult(array(
            "html" => $this->getPartial('adminContractor/linkContractor', array(
                                'contractor' => $contractor, 
                                'group' => $this->getRoute()->getGroup()))
          ), 'contractor_edit');
  }

  /**
   * find a user and returns the corresponding data 
   * to populate the add user form.
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executePopulateFromUser(sfWebRequest $request)
  {
    // this is not a propel route, so no need to filter query before

    $form = new LookupForUserForm(array(), array('autocomplete_url' => chCmsAdminContractorPluginRouting::getLookupForUserAcUrl()));
    $form->bind($request->getParameter($form->getName()), $request->getFiles($form->getName()));

    $data = array();

    if ($form->isValid())
    {
      $user = $form->getsfGuardUser();
      $contractorForm = new ContractorAdminProfileForm();
      $data['user'] = array(
        $contractorForm->generateFieldId('company_name') => $user->getName(),
        $contractorForm->generateFieldId('agenda_header') => $user->getName(),
        $contractorForm->generateFieldId('public_name') => $user->getProfile()->getName(),
        $contractorForm->generateFieldId('mail') => $user->getProfile()->getMail(),
        $contractorForm->generateFieldId('mobile') => $user->getProfile()->getMobile()
      );

      $contractor = new Contractor();
      $contractor->setUser($user);

      // now compute vals for partial
      $hidden_form = new LookupForUserHiddenForm(array(),array('autocomplete_url' => chCmsAdminContractorPluginRouting::getLookupForUserAcUrl()));
      $hidden_form->bind($request->getParameter($form->getName()), $request->getFiles($form->getName()));
      // as the LookupForUserForm will be merged:
//      $contractor_form = new ContractorAdminProfileForm();
//      $hidden_form->getWidgetSchema()->setNameFormat(sprintf('%s[%%s]', $contractor_form->getName()));

      $data['html'] = $this->getPartial('adminContractor/linkContractor',array(
                                                  'contractor'  => $contractor, 
                                                  'lookup_form' => $hidden_form));
    }
    else
    {
      $this->getuser()->addError('<ul><li>'. join('<li></li>', $form->getFormattedErrors()) . '</li></ul>');
    }

    return $this->renderResult($data, null);
  }

  /**
   * remove the top link from populated user
   *
   * @param sfWebRequest $request the user request
   * @return 
   */
  public function executeResetPopulatedUser(sfWebRequest $request)
  {
    $data = array(
      'html' => $this->getPartial('adminContractor/linkContractor', array('contractor' => new Contractor())));
    
    return $this->renderResult($data, null);
  }
}

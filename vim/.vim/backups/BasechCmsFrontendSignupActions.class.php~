
  <?php
/**
 * Base actions for the chCmsGuardExtraPlugin chCmsFrontendSignup module.
 *
 * @package     chCmsGuardExtraPlugin
 * @subpackage  module-chCmsFrontendSignup
 * @author      MoUeTtE <julien_muetton@carpe-hora.com>
 * @version     SVN: $Id: BaseActions.class.php 12628 2008-11-04 14:43:36Z Kris.Wallsmith $
 */
abstract class BasechCmsFrontendSignupActions extends chCmsActions
{

  /**
   * This method will be executed before any other in this class in order
   * to prevent an already logged in user to register again.
   *
   * @return void
   * @author Kevin Gomez <contact@kevingomez.fr>
   **/
  public function preExecute()
  {
    $this->redirectIf($this->getUser()->isAuthenticated(), $this->generateUrl('homepage'));
  }

  /**
   * Check if username already exist
   *
   * @return Boolean
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function executeUserExistSearch(sfWebRequest $request)
  {
    $username = $request->getParameter('username');

    $message='Disponible';

    $result = sfGuardUserQuery::create()
      ->setIgnoreCase(true)
      ->filterByUserName($username)
      ->limit(1)
      ->count();
    if($result)
    {
      $message ='Ce nom d\'utilisateur est déjà pris';
    }
    if(5 > strlen($username))
    {
      $message='Nom d\'utilisteur trop court!';
      $result=1;
    }

    sfApplicationConfiguration::getActive()->loadHelpers(array('Helper', 'Tag', 'I18N', 'chCms', 'JqueryUi'));
    return $this->renderText(json_encode(array(
                'ok' => !$result,
                'icon' => get_boolean_value(!$result),
                'message' => __($message)
                )));
  }
  /**
   * Check if mail already exist
   *
   * @return Boolean
   * @author Ludovic Pellé <ludovic_pelle@carpe-hora.com>
   **/
  public function executeMailExistSearch(sfWebRequest $request)
  {
    $mail = $request->getParameter('mail');

    $message='Disponible';

    $result = sfGuardProfileQuery::create()
      ->setIgnoreCase(true)
      ->filterByMail($mail)
      ->limit(1)
      ->count();

    if($result)
    {
      $message ='Ce mail est déjà pris';
    }
    else if($mail ==="")
    {
      $message='Mail vide!';
      $result=1;
    }

    sfApplicationConfiguration::getActive()->loadHelpers(array('Helper', 'Tag', 'I18N', 'chCms', 'JqueryUi'));
    return $this->renderText(json_encode(array(
                'ok' => !$result,
                'icon' => get_boolean_value(!$result),
                'message' => __($message)
                )));
  }
  /**
   * create a new account
   **/
  public function executeRegister(sfWebRequest $request)
  {
    $this->form = $this->getUser()->getchCmsGuardExtraRegistrationForm();
  }

  public function executeCreate(sfWebRequest $request)
  {
    $this->form = $this->getUser()->getchCmsGuardExtraRegistrationForm();

    $this->processForm($request, $this->form);

    $this->setTemplate('register');
  }

  /**
   * entry point for CancelAuthentication action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeCancelAuthentication(sfWebRequest $request)
  {
    $this->getUser()->cancelchCmsGuardExtraProviderAuth();

    $this->redirect('sf_guard_signup');
  }


  /**
   * processes the registration form. If it's valid, it registers the user
   * and redirect him to the homepage, otherwise it displays an error message.
   *
   * @param sfWebRequest $request the user request
   * @return void
   */
  protected function processForm(sfWebRequest $request, sfForm $form)
  {
    $sf_user = $this->getUser();
    if ($sf_user->haschCmsGuardExtraProvider())
    {

      $params = array_merge($sf_user->getchCmsGuardExtraProviderFormValues(), $request->getParameter($form->getName()));
    }
    else
    {
      $params = $request->getParameter($form->getName());
    }

    $form->bind($params);

    if ($form->isValid())
    {
      $guardUser = $form->save();

      $event = new sfEvent($this->getUser(), 'user.register_success', array('user' => $guardUser, 'context' => $this->getContext()));
      $this->getContext()->getEventDispatcher()->notify($event);

      if (! chTools::get('guard_extra_need_activation', true))
      {
        //NOTIFY
        $this->getUser()->sendWelcomeMessage($guardUser);
      }
      elseif ((! chTools::get('guard_extra_need_activation', true))
              && $sf_user->haschCmsGuardExtraProvider()
              && $guardUser->isMailValidated())
      {
        //NOTIFY
        $this->getUser()->sendWelcomeProviderMessage($guardUser, $sf_user->getchCmsGuardExtraProviderFormValues());
      }
      else
      {
        //NOTIFY
        var_dump($guardUser->getActivation());exit;
        $this->getUser()->sendActivationMessage($guardUser->getActivation());
      }

      $sf_user->cancelchCmsGuardExtraProviderAuth();
      $sf_user->addInfo("Le compte a bien été créé.");


      $this->redirect($this->getUser()->getSigninSuccessRedirectUrl($request, $this->getContext()));
    }

    $this->getUser()->addError('Les données passées comportent des erreurs.');
  }


  /**
   * entry point for Activate action
   * actualy activate the account.
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeActivate(sfWebRequest $request)
  {
    $key = $request->getParameter('hash');
    $username = $request->getParameter('username');

    $user = sfGuardUserQuery::create()
              ->joinWithActivation()
              ->findOneByUsername($username);

    // if no user was found
    // or no activation found
    // or user is active
    // or activation mismatch
    if (    !$user || $user->getIsActive()
        || !$user->getActivation()
        || ($user->getActivation()->getHash() !== $key ))
    {
      $this->getUser()->addError('Unknown user.');
      $this->redirect('chCmsFrontendAccount/signin');
    }

    // all is OK, let's remove the activation
    $con = Propel::getConnection(sfGuardUserPeer::DATABASE_NAME);
    $con->beginTransaction();
    try
    {
      // set active
      $user->setIsActive(true);
      $user->save($con);

      // delete the activation object
      $user->getActivation()->delete($con);

      $con->commit();
    }
    catch(PropelException $e)
    {
      $con->rollback();
      throw $e;
    }

    // set a message and redirect to signin
    $this->getUser()->addInfo('Your account is now active.');
    //NOTIFY
    $this->getUser()->sendWelcomeMessage($sf_user->getGuardUser());
    $this->redirect('chCmsFrontendAccount/signin');
  }

  /**
   * entry point for RequestNewActivation action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeRequestNewActivation(sfWebRequest $request)
  {
    $this->form = new chCmsUserResendActivationForm();
  }

  /**
   * entry point for ResendActivation action
   *
   * @param sfWebRequest $request the user request
   * @return
   */
  public function executeResendActivation(sfWebRequest $request)
  {
    $form = new chCmsUserResendActivationForm();
    $form->bind($request->getParameter($form->getName()), $request->getFiles($form->getName()));

    if ($form->isValid())
    {
      $guardUser = $form->getMatchingUser();

      $activation = $guardUser->getActivation();

      //NOTIFY
      $guardUser->generateActivation();
      $this->getUser()->sendResendActivationMessage($activation);

      $this->getUser()->addInfo('Un nouveau mail d\'activation a été envoyé à l\'adresse '.$form->getValue('email'));

      $this->redirect('chCmsFrontendAccount/signin');
    }

    // there where an error, display form again
    $this->form = $form;
    $this->setTemplate('requestNewActivation');
  }

  public function executeHowToActivate(sfWebRequest $request)
  {
    //this is a static page
  }

  public function executeWhyRegister(sfWebRequest $request)
  {
    //this is a static page
  }
}
